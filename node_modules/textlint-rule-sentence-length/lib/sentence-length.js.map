{"version":3,"sources":["../src/sentence-length.js"],"names":["defaultOptions","max","module","exports","context","options","maxLength","helper","Syntax","RuleError","report","Paragraph","node","isChildNode","BlockQuote","isChildrenSingleLinkNode","children","length","type","Link","paragraph","filter","sentence","Sentence","forEach","source","sentenceText","toString","sentenceLength","startLine","loc","start","line"],"mappings":"AAAA;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB;AACnBC,SAAK;AADc,CAAvB;AAGAC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAgC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC7C,QAAMC,YAAYD,QAAQJ,GAAR,IAAeD,eAAeC,GAAhD;AACA,QAAMM,SAAS,mCAAeH,OAAf,CAAf;AAF6C,QAGrCI,MAHqC,GAGPJ,OAHO,CAGrCI,MAHqC;AAAA,QAG7BC,SAH6B,GAGPL,OAHO,CAG7BK,SAH6B;AAAA,QAGlBC,MAHkB,GAGPN,OAHO,CAGlBM,MAHkB;AAI7C;;AACA,+BACKF,OAAOG,SADZ,YACuBC,IADvB,EAC6B;AACrB,YAAIL,OAAOM,WAAP,CAAmBD,IAAnB,EAAyB,CAACJ,OAAOM,UAAR,CAAzB,CAAJ,EAAmD;AAC/C;AACH;AACD;AACA,YAAMC,2BAA2BH,KAAKI,QAAL,CAAcC,MAAd,KAAyB,CAAzB,IAA8BL,KAAKI,QAAL,CAAc,CAAd,EAAiBE,IAAjB,KAA0BV,OAAOW,IAAhG;AACA,YAAIJ,wBAAJ,EAA8B;AAC1B;AACH;AACD;AACA,YAAMK,YAAY,gCAASR,IAAT,CAAlB;AACAQ,kBAAUJ,QAAV,CAAmBK,MAAnB,CAA0B;AAAA,mBAAYC,SAASJ,IAAT,KAAkB,yBAAeK,QAA7C;AAAA,SAA1B,EAAiFC,OAAjF,CAAyF,oBAAY;AACjG,gBAAMC,SAAS,mCAAiBH,QAAjB,CAAf;AACA,gBAAMI,eAAeD,OAAOE,QAAP,EAArB;AACA;AACA,gBAAMC,iBAAiBF,aAAaT,MAApC;AACA,gBAAIW,iBAAiBtB,SAArB,EAAgC;AAC5B,oBAAMuB,YAAYP,SAASQ,GAAT,CAAaC,KAAb,CAAmBC,IAArC;AACAtB,uBACIY,QADJ,EAEI,IAAIb,SAAJ,WAAsBoB,SAAtB,yBAAmDD,cAAnD,iDAA6GtB,SAA7G,iBACjBsB,iBAAiBtB,SADA,mBAFJ;AAKH;AACJ,SAbD;AAcH,KA1BL;AA4BH,CAjCD","file":"sentence-length.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { splitAST, Syntax as SentenceSyntax } from \"sentence-splitter\";\nimport StringSource from \"textlint-util-to-string\";\nimport { RuleHelper } from \"textlint-rule-helper\";\n\nconst defaultOptions = {\n    max: 100\n};\nmodule.exports = function(context, options = {}) {\n    const maxLength = options.max || defaultOptions.max;\n    const helper = new RuleHelper(context);\n    const { Syntax, RuleError, report } = context;\n    // toPlainText\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n            // If a single Link node in the paragraph node, should be ignore the link length\n            const isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;\n            if (isChildrenSingleLinkNode) {\n                return;\n            }\n            // empty break line == split sentence\n            const paragraph = splitAST(node);\n            paragraph.children.filter(sentence => sentence.type === SentenceSyntax.Sentence).forEach(sentence => {\n                const source = new StringSource(sentence);\n                const sentenceText = source.toString();\n                // larger than > 100\n                const sentenceLength = sentenceText.length;\n                if (sentenceLength > maxLength) {\n                    const startLine = sentence.loc.start.line;\n                    report(\n                        sentence,\n                        new RuleError(`Line ${startLine} sentence length(${sentenceLength}) exceeds the maximum sentence length of ${maxLength}.\nOver ${sentenceLength - maxLength} characters.`)\n                    );\n                }\n            });\n        }\n    };\n};\n"]}