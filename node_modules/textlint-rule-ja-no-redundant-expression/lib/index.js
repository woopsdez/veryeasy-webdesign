// MIT © 2016 azu
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var tokenize = require("kuromojin").tokenize;
var dictionaryList = require("./dictionary");
var createMatchAll = require("morpheme-match-all");
var replaceWithCaptureTokens = function replaceWithCaptureTokens(text, tokens, actualTokens) {
    var resultText = text;
    tokens.forEach(function (token, index) {
        // _captureがないのは無視
        if (!token._capture) {
            return;
        }
        var actualToken = actualTokens[index];
        resultText = resultText.replace(token._capture, actualToken.surface_form);
    });
    return resultText;
};
var reporter = function reporter(context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report,
        fixer = context.fixer,
        getSource = context.getSource;

    var matchAll = createMatchAll(dictionaryList);
    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        return tokenize(text).then(function (currentTokens) {
            /**
             * @type {MatchResult[]}
             */
            var matchResults = matchAll(currentTokens);
            matchResults.forEach(function (matchResult) {
                var firstToken = matchResult.tokens[0];
                var lastToken = matchResult.tokens[matchResult.tokens.length - 1];
                var firstWordIndex = Math.max(firstToken.word_position - 1, 0);
                var lastWorkIndex = Math.max(lastToken.word_position - 1, 0);
                // replace $1
                var message = replaceWithCaptureTokens(matchResult.dict.message, matchResult.dict.tokens, matchResult.tokens) + (matchResult.dict.url ? "\u53C2\u8003: " + matchResult.dict.url : "");
                var expected = matchResult.dict.expected ? replaceWithCaptureTokens(matchResult.dict.expected, matchResult.dict.tokens, matchResult.tokens) : undefined;
                if (expected) {
                    report(node, new RuleError(message, {
                        index: firstWordIndex,
                        fix: fixer.replaceTextRange([firstWordIndex, lastWorkIndex + lastToken.surface_form.length], expected)
                    }));
                } else {
                    report(node, new RuleError(message, {
                        index: firstWordIndex
                    }));
                }
            });
        });
    });
};
module.exports = {
    linter: reporter,
    fixer: reporter
};
//# sourceMappingURL=index.js.map