// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var helper = new _textlintRuleHelper.RuleHelper(context);
    var Syntax = context.Syntax;
    var report = context.report;
    var getSource = context.getSource;
    var RuleError = context.RuleError;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        var source = new _textlintUtilToString2.default(node);
        var text = source.toString();
        var isSentenceNode = function isSentenceNode(node) {
            return node.type === _sentenceSplitter.Syntax.Sentence;
        };
        var sentences = (0, _sentenceSplitter2.default)(text, {
            charRegExp: /[。\?\!？！]/
        }).filter(isSentenceNode);
        return (0, _kuromojin.getTokenizer)().then(function (tokenizer) {
            var checkSentence = function checkSentence(sentence) {
                var tokens = tokenizer.tokenizeForSentence(sentence.raw);
                var isConjunctiveParticleGaToken = function isConjunctiveParticleGaToken(token) {
                    return token.pos_detail_1 === "接続助詞" && token.surface_form === "が";
                };
                var conjunctiveParticleGaTokens = tokens.filter(isConjunctiveParticleGaToken);
                if (conjunctiveParticleGaTokens.length <= 1) {
                    return;
                }
                var current = conjunctiveParticleGaTokens[0];
                var originalPosition = source.originalPositionFor({
                    line: sentence.loc.start.line,
                    column: sentence.loc.start.column + (current.word_position - 1)
                });
                // padding position
                var padding = {
                    line: originalPosition.line - 1,
                    // matchLastToken.word_position start with 1
                    // this is padding column start with 0 (== -1)
                    column: originalPosition.column
                };
                report(node, new RuleError("文中に逆接の接続助詞 \"が\" が二回以上使われています。", padding));return current;
            };
            sentences.forEach(checkSentence);
        });
    });
};

var _textlintRuleHelper = require("textlint-rule-helper");

var _kuromojin = require("kuromojin");

var _sentenceSplitter = require("sentence-splitter");

var _sentenceSplitter2 = _interopRequireDefault(_sentenceSplitter);

var _textlintUtilToString = require("textlint-util-to-string");

var _textlintUtilToString2 = _interopRequireDefault(_textlintUtilToString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
    1. Paragraph Node -> text
    2. text -> sentences
    3. tokenize sentence
    4. report error if found word that match the rule.

    TODO: need abstraction
 */


;
module.exports = exports['default'];
//# sourceMappingURL=no-doubled-conjunctive-particle-ga.js.map