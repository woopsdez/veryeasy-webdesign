{"version":3,"sources":["../src/no-doubled-conjunctive-particle-ga.js"],"names":[],"mappings":";AACA;;;;;;kBAce,UAAU,OAAV,EAAiC;QAAd,gEAAU,kBAAI;;AAC5C,QAAM,SAAS,mCAAe,OAAf,CAAT,CADsC;QAErC,SAAwC,QAAxC,OAFqC;QAE7B,SAAgC,QAAhC,OAF6B;QAErB,YAAwB,QAAxB,UAFqB;QAEV,YAAa,QAAb,UAFU;;AAG5C,+BACK,OAAO,SAAP,YAAkB,MAAK;AACpB,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAAC,OAAO,IAAP,EAAa,OAAO,KAAP,EAAc,OAAO,UAAP,EAAmB,OAAO,QAAP,CAAxE,CAAJ,EAA+F;AAC3F,mBAD2F;SAA/F;AAGA,YAAM,SAAS,mCAAiB,IAAjB,CAAT,CAJc;AAKpB,YAAM,OAAO,OAAO,QAAP,EAAP,CALc;AAMpB,YAAM,iBAAiB,SAAjB,cAAiB,OAAQ;AAC3B,mBAAO,KAAK,IAAL,KAAc,yBAAe,QAAf,CADM;SAAR,CANH;AASpB,YAAI,YAAY,gCAAe,IAAf,EAAqB;AACjC,wBAAY,WAAZ;SADY,EAEb,MAFa,CAEN,cAFM,CAAZ,CATgB;AAYpB,eAAO,+BAAe,IAAf,CAAoB,qBAAa;AACtC,gBAAM,gBAAgB,SAAhB,aAAgB,CAAC,QAAD,EAAc;AAClC,oBAAI,SAAS,UAAU,mBAAV,CAA8B,SAAS,GAAT,CAAvC,CAD8B;AAElC,oBAAM,+BAA+B,SAA/B,4BAA+B,QAAS;AAC5C,2BAAO,MAAM,YAAN,KAAuB,MAAvB,IAAiC,MAAM,YAAN,KAAuB,GAAvB,CADI;iBAAT,CAFH;AAKlC,oBAAI,8BAA8B,OAAO,MAAP,CAAc,4BAAd,CAA9B,CAL8B;AAMlC,oBAAI,4BAA4B,MAA5B,IAAsC,CAAtC,EAAyC;AAC3C,2BAD2C;iBAA7C;AAGA,oBAAI,UAAU,4BAA4B,CAA5B,CAAV,CAT8B;AAUlC,oBAAI,mBAAmB,OAAO,mBAAP,CAA2B;AAChD,0BAAM,SAAS,GAAT,CAAa,KAAb,CAAmB,IAAnB;AACN,4BAAQ,SAAS,GAAT,CAAa,KAAb,CAAmB,MAAnB,IAA6B,QAAQ,aAAR,GAAwB,CAAxB,CAA7B;iBAFa,CAAnB;;AAV8B,oBAe9B,UAAU;AACZ,0BAAM,iBAAiB,IAAjB,GAAwB,CAAxB;;;AAGN,4BAAQ,iBAAiB,MAAjB;iBAJN,CAf8B;AAqBlC,uBAAO,IAAP,EAAa,IAAI,SAAJ,mCAA8C,OAA9C,CAAb,EArBkC,OAqB4D,OAAP,CArBrD;aAAd,CADgB;AAwBtC,sBAAU,OAAV,CAAkB,aAAlB,EAxBsC;SAAb,CAA3B,CAZoB;MAD5B,CAH4C;CAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4Cd","file":"no-doubled-conjunctive-particle-ga.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {getTokenizer} from \"kuromojin\";\nimport splitSentences, {Syntax as SentenceSyntax} from \"sentence-splitter\";\nimport StringSource from \"textlint-util-to-string\";\n\n/*\n    1. Paragraph Node -> text\n    2. text -> sentences\n    3. tokenize sentence\n    4. report error if found word that match the rule.\n\n    TODO: need abstraction\n */\nexport default function (context, options = {}) {\n    const helper = new RuleHelper(context);\n    const {Syntax, report, getSource, RuleError} = context;\n    return {\n        [Syntax.Paragraph](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const source = new StringSource(node);\n            const text = source.toString();\n            const isSentenceNode = node => {\n                return node.type === SentenceSyntax.Sentence;\n            };\n            let sentences = splitSentences(text, {\n                charRegExp: /[。\\?\\!？！]/\n            }).filter(isSentenceNode);\n            return getTokenizer().then(tokenizer => {\n              const checkSentence = (sentence) => {\n                let tokens = tokenizer.tokenizeForSentence(sentence.raw);\n                const isConjunctiveParticleGaToken = token => {\n                  return token.pos_detail_1 === \"接続助詞\" && token.surface_form === \"が\";\n                };\n                let conjunctiveParticleGaTokens = tokens.filter(isConjunctiveParticleGaToken);\n                if (conjunctiveParticleGaTokens.length <= 1) {\n                  return;\n                }\n                let current = conjunctiveParticleGaTokens[0];\n                let originalPosition = source.originalPositionFor({\n                  line: sentence.loc.start.line,\n                  column: sentence.loc.start.column + (current.word_position - 1)\n                });\n                // padding position\n                var padding = {\n                  line: originalPosition.line - 1,\n                  // matchLastToken.word_position start with 1\n                  // this is padding column start with 0 (== -1)\n                  column: originalPosition.column\n                };\n                report(node, new RuleError(`文中に逆接の接続助詞 \"が\" が二回以上使われています。`, padding));                  return current;\n              }\n              sentences.forEach(checkSentence);\n            });\n        }\n    }\n};\n"]}