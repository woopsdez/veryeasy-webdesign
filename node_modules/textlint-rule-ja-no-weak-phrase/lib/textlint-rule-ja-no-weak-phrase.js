// LICENSE : MIT
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var tokenize = require("kuromojin").tokenize;
var dictionaryList = require("./dict");
var createTokenMatcher = require("morpheme-match-all");
var matchAll = createTokenMatcher(dictionaryList);
module.exports = function (context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report,
        getSource = context.getSource;

    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        return tokenize(text).then(function (currentTokens) {
            /**
             * @type {MatchResult[]}
             */
            var matchResults = matchAll(currentTokens);
            matchResults.forEach(function (matchResult) {
                var firstToken = matchResult.tokens[0];
                var lastToken = matchResult.tokens[matchResult.tokens.length - 1];
                var firstWordIndex = Math.max(firstToken.word_position - 1, 0);
                var lastWorkIndex = Math.max(lastToken.word_position - 1, 0);
                // replace $1
                var message = matchResult.dict.message;
                report(node, new RuleError(message, {
                    index: firstWordIndex
                }));
            });
        });
    });
};
//# sourceMappingURL=textlint-rule-ja-no-weak-phrase.js.map