{"version":3,"sources":["../src/prh-rule.js"],"names":["prh","require","path","untildify","createPrhEngine","rulePaths","baseDir","length","expandedRulePaths","map","rulePath","prhEngine","fromYAMLFilePath","resolve","slice","forEach","config","ruleFilePath","merge","createPrhEngineFromContents","yamlContents","fromYAML","content","mergePrh","engines","engines_","filter","engine","mainEngine","assertOptions","options","ruleContents","Error","forEachChange","changeSet","str","onChangeOfMatch","sortedDiffs","diffs","sort","a","b","index","delta","diff","result","expected","replace","match","g1","parseInt","matches","matchStartIndex","matchEndIndex","actual","reporter","context","textlintRcFilePath","configFile","textlintRCDir","dirname","process","cwd","prhEngineContent","prhEngineFiles","helper","Syntax","getSource","report","fixer","RuleError","Str","node","isChildNode","Link","Image","BlockQuote","Emphasis","text","makeChangeSet","fix","replaceTextRange","module","exports","linter"],"mappings":"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","file":"prh-rule.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nconst prh = require(\"prh\");\nconst path = require(\"path\");\nconst untildify = require('untildify');\nfunction createPrhEngine(rulePaths, baseDir) {\n    if (rulePaths.length === 0) {\n        return null;\n    }\n    const expandedRulePaths = rulePaths.map(rulePath => untildify(rulePath));\n    const prhEngine = prh.fromYAMLFilePath(path.resolve(baseDir, expandedRulePaths[0]));\n    expandedRulePaths.slice(1).forEach(ruleFilePath => {\n        const config = prh.fromYAMLFilePath(path.resolve(baseDir, ruleFilePath));\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\nfunction createPrhEngineFromContents(yamlContents) {\n    if (yamlContents.length === 0) {\n        return null;\n    }\n    const prhEngine = prh.fromYAML(null, yamlContents[0]);\n    yamlContents.slice(1).forEach(content => {\n        const config = prh.fromYAML(null, content);\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\nfunction mergePrh(...engines) {\n    const engines_ = engines.filter(engine => !!engine);\n    const mainEngine = engines_[0];\n    engines_.slice(1).forEach(engine => {\n        mainEngine.merge(engine);\n    });\n    return mainEngine;\n}\nconst assertOptions = (options) => {\n    if (typeof options.ruleContents === \"undefined\" && typeof options.rulePaths === \"undefined\") {\n        throw new Error(`textlint-rule-prh require Rule Options.\nPlease set .textlinrc:\n{\n    \"rules\": {\n        \"prh\": {\n            \"rulePaths\" :[\"path/to/prh.yml\"]\n        }\n    }\n}\n`);\n    }\n};\n\n/**\n * for each diff of changeSet\n * @param {ChangeSet} changeSet\n * @param {string} str\n * @param {function({\n            matchStartIndex: number,\n            matchEndIndex: number,\n            actual: string\n            expected: string\n        })}onChangeOfMatch\n */\nconst forEachChange = (changeSet, str, onChangeOfMatch) => {\n    const sortedDiffs = changeSet.diffs.sort(function(a, b) {\n        return a.index - b.index;\n    });\n    let delta = 0;\n    sortedDiffs.forEach(function(diff) {\n        const result = diff.expected.replace(/\\$([0-9]{1,2})/g, function(match, g1) {\n            const index = parseInt(g1);\n            if (index === 0 || (diff.matches.length - 1) < index) {\n                return match;\n            }\n            return diff.matches[index] || \"\";\n        });\n        // matchStartIndex/matchEndIndex value is original position, not replaced position\n        // textlint use original position\n        const matchStartIndex = diff.index;\n        const matchEndIndex = matchStartIndex + diff.matches[0].length;\n        // actual => expected\n        const actual = str.slice(diff.index + delta, diff.index + delta + diff.matches[0].length);\n        onChangeOfMatch({\n            matchStartIndex,\n            matchEndIndex,\n            actual: actual,\n            expected: result\n        });\n        str = str.slice(0, diff.index + delta) + result + str.slice(diff.index + delta + diff.matches[0].length);\n        delta += result.length - diff.matches[0].length;\n    });\n};\nfunction reporter(context, options = {}) {\n    assertOptions(options);\n    const textlintRcFilePath = context.config ? context.config.configFile : null;\n    // .textlinrc directory\n    const textlintRCDir = textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n    // create prh config\n    const rulePaths = options.rulePaths || [];\n    const ruleContents = options.ruleContents || [];\n    // yaml file + yaml contents\n    const prhEngineContent = createPrhEngineFromContents(ruleContents);\n    const prhEngineFiles = createPrhEngine(rulePaths, textlintRCDir);\n    const prhEngine = mergePrh(prhEngineFiles, prhEngineContent);\n    const helper = new RuleHelper(context);\n    const {Syntax, getSource, report, fixer, RuleError} = context;\n    return {\n        [Syntax.Str](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            // to get position from index\n            const makeChangeSet = prhEngine.makeChangeSet(null, text);\n            forEachChange(makeChangeSet, text, ({matchStartIndex, matchEndIndex, actual, expected}) => {\n                // If result is not changed, should not report\n                if (actual === expected) {\n                    return;\n                }\n                report(node, new RuleError(actual + \" => \" + expected, {\n                    index: matchStartIndex,\n                    fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected)\n                }));\n            });\n        }\n    }\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};"]}