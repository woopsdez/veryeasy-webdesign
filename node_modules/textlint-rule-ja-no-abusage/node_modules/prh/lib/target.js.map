{"version":3,"file":"target.js","sourceRoot":"","sources":["target.ts"],"names":[],"mappings":";AAAA,IAAY,CAAC,WAAM,gBAAgB,CAAC,CAAA;AAGpC,8BAA0B,iBAAiB,CAAC,CAAA;AAE5C;IAKI,gBAAY,GAAe;QACvB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3D,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,uBAAa,CAAC,OAAO,CAAC,EAA1B,CAA0B,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACvB,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,uBAAa,CAAC,OAAO,CAAC,EAA1B,CAA0B,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACvB,CAAC;IACL,CAAC;IAED,sBAAK,GAAL;QACI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,EAAE,EAAf,CAAe,CAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,EAAE,EAAf,CAAe,CAAC,CAAC;IACtD,CAAC;IAED,uBAAM,GAAN;QACI,IAAI,GAAG,GAAQ,EAAE,CAAC;QAClB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzB,QAAQ,CAAC;YACb,CAAC;YACD,IAAI,KAAK,GAAS,IAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,CAAC,CAAC;gBAC1B,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAC5B,QAAQ,CAAC;YACb,CAAC;YACD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IACL,aAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CD;wBA8CC,CAAA","sourcesContent":["import * as r from \"./utils/regexp\";\n\nimport * as raw from \"./raw\";\nimport TargetPattern from \"./targetPattern\";\n\nexport default class Target {\n    file: RegExp;\n    includes: TargetPattern[];\n    excludes: TargetPattern[];\n\n    constructor(src: raw.Target) {\n        if (!src) {\n            throw new Error(\"src is requried\");\n        }\n        this.file = r.parseRegExpString(src.file);\n        if (!this.file) {\n            this.file = new RegExp(r.escapeSpecialChars(src.file));\n        }\n        if (src.includes) {\n            this.includes = src.includes.map(include => new TargetPattern(include));\n        } else {\n            this.includes = [];\n        }\n        if (src.excludes) {\n            this.excludes = src.excludes.map(exclude => new TargetPattern(exclude));\n        } else {\n            this.excludes = [];\n        }\n    }\n\n    reset() {\n        this.file.lastIndex = 0;\n        this.includes.forEach(include => include.reset());\n        this.excludes.forEach(exclude => exclude.reset());\n    }\n\n    toJSON() {\n        let alt: any = {};\n        for (let key in this) {\n            if (key.indexOf(\"_\") === 0) {\n                continue;\n            }\n            let value = (<any>this)[key];\n            if (value instanceof RegExp) {\n                alt[key] = value.toString();\n                continue;\n            }\n            alt[key] = value;\n        }\n        return alt;\n    }\n}\n"]}