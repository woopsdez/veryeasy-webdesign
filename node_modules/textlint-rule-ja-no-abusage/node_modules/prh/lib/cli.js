"use strict";
var path = require("path");
var fs = require("fs");
var yaml = require("js-yaml");
var lib = require("./");
var commandpost = require("commandpost");
var pkg = require("../package.json");
var root = commandpost
    .create("prh <files...>")
    .version(pkg.version, "-v, --version")
    .option("--json", "rule set to json")
    .option("--yaml", "rule set to parsed yaml")
    .option("--rules <path>", "path to rule yaml file")
    .option("-r, --replace", "replace input files")
    .action(function (opts, args) {
    var paths = [getConfigFileName(process.cwd(), "prh.yml") || __dirname + "/../rules/media/WEB+DB_PRESS.yml"];
    if (opts.rules && opts.rules[0]) {
        paths = opts.rules;
    }
    var config = lib.fromYAMLFilePath(paths[0]);
    paths.splice(1).forEach(function (path) {
        var c = lib.fromYAMLFilePath(path);
        config.merge(c);
    });
    if (opts.json) {
        console.log(JSON.stringify(config, null, 2));
        return;
    }
    else if (opts.yaml) {
        console.log(yaml.dump(JSON.parse(JSON.stringify(config, null, 2))));
        return;
    }
    args.files.forEach(function (filePath) {
        var result = config.replaceByRule(filePath);
        if (opts.replace) {
            fs.writeFileSync(filePath, result);
        }
        else {
            console.log(result);
        }
    });
});
root
    .subCommand("init")
    .description("generate prh.yml")
    .action(function (_opts, _args) {
    fs.createReadStream(__dirname + "/../misc/prh.yml").pipe(fs.createWriteStream("prh.yml"));
    console.log("create prh.yml");
    console.log("see prh/rules collection https://github.com/prh/rules");
});
commandpost
    .exec(root, process.argv)
    .catch(errorHandler);
function errorHandler(err) {
    if (err instanceof Error) {
        console.error(err.stack);
    }
    else {
        console.error(err);
    }
    return Promise.resolve(null).then(function () {
        process.exit(1);
    });
}
function getConfigFileName(baseDir, configFileName) {
    var configFilePath = path.resolve(baseDir, configFileName);
    if (fs.existsSync(configFilePath)) {
        return configFilePath;
    }
    if (baseDir.length === path.dirname(baseDir).length) {
        return null;
    }
    return getConfigFileName(path.resolve(baseDir, "../"), configFileName);
}
exports.getConfigFileName = getConfigFileName;
//# sourceMappingURL=cli.js.map