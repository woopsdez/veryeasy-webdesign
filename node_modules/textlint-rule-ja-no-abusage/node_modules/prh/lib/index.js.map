{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,IAAI,WAAM,SAAS,CAAC,CAAA;AAGhC,uBAAmB,UAAU,CAAC,CAAA;AAErB,cAAM;AAEf,0BAAiC,UAAkB;IAC/C,IAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IAChE,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AACzC,CAAC;AAHe,wBAAgB,mBAG/B,CAAA;AAED,kBAAyB,UAAkB,EAAE,WAAmB;IAC5D,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACvC,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAChD,CAAC;AAHe,gBAAQ,WAGvB,CAAA;AAED,uBAA8B,UAAkB,EAAE,SAAqB;IACnE,IAAI,MAAM,GAAG,IAAI,gBAAM,CAAC,SAAS,CAAC,CAAC;IAEnC,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC;QAC5B,IAAI,OAAO,GAAG,OAAO,GAAG,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACpD,OAAO,CAAC,OAAO,CAAC,UAAA,EAAE;YACd,IAAI,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;YACpE,IAAI,SAAS,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;YACrD,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,MAAM,CAAC,MAAM,CAAC;AAClB,CAAC;AAde,qBAAa,gBAc5B,CAAA","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as yaml from \"js-yaml\";\n\nimport * as raw from \"./raw\";\nimport Engine from \"./engine\";\n\nexport { Engine };\n\nexport function fromYAMLFilePath(configPath: string): Engine {\n    let content = fs.readFileSync(configPath, { encoding: \"utf8\" });\n    return fromYAML(configPath, content);\n}\n\nexport function fromYAML(configPath: string, yamlContent: string): Engine {\n    let rawConfig = yaml.load(yamlContent);\n    return fromRowConfig(configPath, rawConfig);\n}\n\nexport function fromRowConfig(configPath: string, rawConfig: raw.Config): Engine {\n    let engine = new Engine(rawConfig);\n\n    if (rawConfig.imports) {\n        let tmp = rawConfig.imports;\n        let imports = typeof tmp === \"string\" ? [tmp] : tmp;\n        imports.forEach(im => {\n            let importedConfigPath = path.resolve(path.dirname(configPath), im);\n            let newEngine = fromYAMLFilePath(importedConfigPath);\n            engine.merge(newEngine);\n        });\n    }\n\n    return engine;\n}\n"]}