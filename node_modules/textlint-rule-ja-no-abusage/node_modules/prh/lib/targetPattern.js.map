{"version":3,"file":"targetPattern.js","sourceRoot":"","sources":["targetPattern.ts"],"names":[],"mappings":";AAAA,IAAY,CAAC,WAAM,gBAAgB,CAAC,CAAA;AAGpC;IAGI,uBAAY,GAA+B;QACvC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACvC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YACxC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;YACzD,CAAC;YACD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,eAAe,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACpF,CAAC;YACD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC;IACL,CAAC;IAED,6BAAK,GAAL;QACI,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,8BAAM,GAAN;QACI,IAAI,GAAG,GAAQ,EAAE,CAAC;QAClB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzB,QAAQ,CAAC;YACb,CAAC;YACD,IAAI,KAAK,GAAS,IAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,CAAC,CAAC;gBAC1B,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAC5B,QAAQ,CAAC;YACb,CAAC;YACD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IACL,oBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CD;+BA6CC,CAAA","sourcesContent":["import * as r from \"./utils/regexp\";\nimport * as raw from \"./raw\";\n\nexport default class TargetPattern {\n    pattern: RegExp;\n\n    constructor(src: string | raw.TargetPattern) {\n        if (!src) {\n            throw new Error(\"src is requried\");\n        }\n        if (typeof src === \"string\") {\n            this.pattern = r.parseRegExpString(src);\n            if (!this.pattern) {\n                this.pattern = new RegExp(r.escapeSpecialChars(src));\n            }\n            this.pattern = r.addDefaultFlags(this.pattern);\n            return;\n        } else {\n            if (!src.pattern) {\n                throw new Error(\"pattern is requried\");\n            }\n            this.pattern = r.parseRegExpString(src.pattern);\n            if (!this.pattern) {\n                this.pattern = r.addDefaultFlags(new RegExp(r.escapeSpecialChars(src.pattern)));\n            }\n            this.pattern = r.addDefaultFlags(this.pattern);\n        }\n    }\n\n    reset() {\n        this.pattern.lastIndex = 0;\n    }\n\n    toJSON() {\n        let alt: any = {};\n        for (let key in this) {\n            if (key.indexOf(\"_\") === 0) {\n                continue;\n            }\n            let value = (<any>this)[key];\n            if (value instanceof RegExp) {\n                alt[key] = value.toString();\n                continue;\n            }\n            alt[key] = value;\n        }\n        return alt;\n    }\n}\n"]}