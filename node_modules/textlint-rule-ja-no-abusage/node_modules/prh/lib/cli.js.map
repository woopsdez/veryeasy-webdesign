{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\nimport * as fs from \"fs\";\nimport * as yaml from \"js-yaml\";\nimport * as lib from \"./\";\n\nimport * as commandpost from \"commandpost\";\nlet pkg = require(\"../package.json\");\n\ninterface RootOpts {\n    json: boolean;\n    yaml: boolean;\n    replace: boolean;\n    rules: string[];\n}\n\ninterface RootArgs {\n    files: string[];\n}\n\nlet root = commandpost\n    .create<RootOpts, RootArgs>(\"prh <files...>\")\n    .version(pkg.version, \"-v, --version\")\n    .option(\"--json\", \"rule set to json\")\n    .option(\"--yaml\", \"rule set to parsed yaml\")\n    .option(\"--rules <path>\", \"path to rule yaml file\")\n    .option(\"-r, --replace\", \"replace input files\")\n    .action((opts, args) => {\n        let paths = [getConfigFileName(process.cwd(), \"prh.yml\") || __dirname + \"/../rules/media/WEB+DB_PRESS.yml\"];\n        if (opts.rules && opts.rules[0]) {\n            paths = opts.rules;\n        }\n        let config = lib.fromYAMLFilePath(paths[0]);\n        paths.splice(1).forEach(path => {\n            let c = lib.fromYAMLFilePath(path);\n            config.merge(c);\n        });\n\n        if (opts.json) {\n            console.log(JSON.stringify(config, null, 2));\n            return;\n        } else if (opts.yaml) {\n            console.log(yaml.dump(JSON.parse(JSON.stringify(config, null, 2))));\n            return;\n        }\n        args.files.forEach(filePath => {\n            let result = config.replaceByRule(filePath);\n            if (opts.replace) {\n                fs.writeFileSync(filePath, result);\n            } else {\n                console.log(result);\n            }\n        });\n    });\n\nroot\n    .subCommand<{}, {}>(\"init\")\n    .description(\"generate prh.yml\")\n    .action((_opts, _args) => {\n        fs.createReadStream(__dirname + \"/../misc/prh.yml\").pipe(fs.createWriteStream(\"prh.yml\"));\n        console.log(\"create prh.yml\");\n        console.log(\"see prh/rules collection https://github.com/prh/rules\");\n    });\n\ncommandpost\n    .exec(root, process.argv)\n    .catch(errorHandler);\n\nfunction errorHandler(err: any) {\n    if (err instanceof Error) {\n        console.error(err.stack);\n    } else {\n        console.error(err);\n    }\n    return Promise.resolve(null).then(() => {\n        process.exit(1);\n    });\n}\n\nexport function getConfigFileName(baseDir: string, configFileName: string): string | null {\n    let configFilePath = path.resolve(baseDir, configFileName);\n    if (fs.existsSync(configFilePath)) {\n        return configFilePath;\n    }\n\n    if (baseDir.length === path.dirname(baseDir).length) {\n        return null;\n    }\n\n    return getConfigFileName(path.resolve(baseDir, \"../\"), configFileName);\n}\n"]}