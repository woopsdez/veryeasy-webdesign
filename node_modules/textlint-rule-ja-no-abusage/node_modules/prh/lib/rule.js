"use strict";
var r = require("./utils/regexp");
var options_1 = require("./options");
var ruleSpec_1 = require("./ruleSpec");
var diff_1 = require("./changeset/diff");
var changeset_1 = require("./changeset/changeset");
var Rule = (function () {
    function Rule(src) {
        if (!src) {
            throw new Error("src is requried");
        }
        var rawRule;
        if (typeof src === "string") {
            rawRule = {
                expected: src,
            };
        }
        else {
            rawRule = src;
        }
        this.options = new options_1.default(this, rawRule.options);
        this.expected = rawRule.expected;
        if (this.expected == null) {
            throw new Error("expected is required");
        }
        this.pattern = this._patternToRegExp(rawRule.pattern || rawRule.patterns);
        if (this.pattern == null) {
            throw new Error("pattern is required");
        }
        this.regexpMustEmpty = rawRule.regexpMustEmpty;
        // for JSON order
        var options = this.options;
        delete this.options;
        this.options = options;
        this.specs = (rawRule.specs || []).map(function (spec) { return new ruleSpec_1.default(spec); });
        this.raw = rawRule;
        this.check();
    }
    /* @internal */
    Rule.prototype._patternToRegExp = function (pattern) {
        var _this = this;
        var result;
        if (pattern == null) {
            result = r.spreadAlphaNum(this.expected);
            if (this.options.wordBoundary) {
                result = r.addBoundary(result);
            }
            return r.addDefaultFlags(result);
        }
        if (typeof pattern === "string") {
            result = r.parseRegExpString(pattern);
            if (result) {
                return r.addDefaultFlags(result);
            }
            if (this.options.wordBoundary) {
                result = r.addBoundary(pattern);
            }
            else {
                result = new RegExp(r.escapeSpecialChars(pattern));
            }
            return r.addDefaultFlags(result);
        }
        else if (pattern instanceof Array) {
            result = r.combine.apply(null, pattern.map(function (p) { return _this._patternToRegExp(p); }));
            return r.addDefaultFlags(result);
        }
        return result;
    };
    Rule.prototype.reset = function () {
        this.pattern.lastIndex = 0;
    };
    Rule.prototype.check = function () {
        var _this = this;
        this.specs.forEach(function (spec) {
            var result = _this.applyRule(spec.from).applyChangeSets(spec.from);
            if (spec.to !== result) {
                throw new Error(_this.expected + " spec failed. \"" + spec.from + "\", expected \"" + spec.to + "\", but got \"" + result + "\", " + _this.pattern);
            }
        });
    };
    Rule.prototype.applyRule = function (content) {
        var _this = this;
        this.reset();
        var resultList = r.collectAll(this.pattern, content);
        var diffs = resultList
            .map(function (result) {
            // JavaScriptでの正規表現では /(?<!記|大)事/ のような書き方ができない
            // /(記|大)事/ で regexpMustEmpty $1 の場合、第一グループが空じゃないとマッチしない、というルールにして回避
            if (_this.regexpMustEmpty) {
                var match = /^\$([0-9]+)$/.exec(_this.regexpMustEmpty);
                if (match == null) {
                    throw new Error(_this.expected + " target failed. please use $1 format.");
                }
                var index = parseInt(match[1], 10);
                if (result[index]) {
                    return null;
                }
            }
            return new diff_1.default(_this.pattern, _this.expected, result.index, Array.prototype.slice.call(result), _this);
        })
            .filter(function (v) { return !!v; });
        return new changeset_1.default(diffs);
    };
    Rule.prototype.toJSON = function () {
        var alt = {};
        for (var key in this) {
            if (key.indexOf("_") === 0) {
                continue;
            }
            var value = this[key];
            if (value instanceof RegExp) {
                alt[key] = value.toString();
                continue;
            }
            alt[key] = value;
        }
        return alt;
    };
    return Rule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Rule;
//# sourceMappingURL=rule.js.map