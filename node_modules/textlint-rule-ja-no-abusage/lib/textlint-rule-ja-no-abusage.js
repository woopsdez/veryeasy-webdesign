// LICENSE : MIT
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var tokenize = require("kuromojin").tokenize;
var fs = require("fs");
var path = require("path");
var prh = require("textlint-rule-prh");
var dictionaryList = require("./dictionary");
var createTokenMatcher = require("morpheme-match");
var reporter = function reporter(context) {
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var fixer = context.fixer;
    var getSource = context.getSource;

    var matcherList = dictionaryList.map(function (dict) {
        return {
            matcher: createTokenMatcher(dict["tokens"]),
            message: dict["message"],
            expected: dict["expected"]
        };
    });
    var prhLinter = prh.linter;
    var prhStr = prhLinter(context, {
        ruleContents: [fs.readFileSync(path.join(__dirname, "..", "dict", "prh.yml"))]
    });
    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        prhStr[Syntax.Str](node);
        return tokenize(text).then(function (currentTokens) {
            currentTokens.forEach(function (token) {
                matcherList.forEach(function (_ref) {
                    var matcher = _ref.matcher;
                    var message = _ref.message;
                    var expected = _ref.expected;

                    var _matcher = matcher(token);

                    var match = _matcher.match;
                    var tokens = _matcher.tokens;

                    if (!match) {
                        return;
                    }
                    var firstToken = tokens[0];
                    var index = Math.max(firstToken.word_position - 1, 0);
                    if (expected) {
                        report(node, new RuleError(message, {
                            index: index,
                            fix: fixer.replaceTextRange([index, index + expected.length], expected)
                        }));
                    } else {
                        report(node, new RuleError(message, {
                            index: index
                        }));
                    }
                });
            });
        });
    });
};
module.exports = {
    linter: reporter,
    fixer: reporter
};
//# sourceMappingURL=textlint-rule-ja-no-abusage.js.map