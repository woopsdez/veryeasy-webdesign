{"version":3,"sources":["../src/textlint-rule-prh.js"],"names":["RegExp","prototype","flags","undefined","Object","defineProperty","configurable","get","toString","match","prh","require","path","untildify","defaultOptions","checkLink","checkBlockQuote","checkEmphasis","checkHeader","createPrhEngine","rulePaths","baseDir","length","expandedRulePaths","map","rulePath","prhEngine","fromYAMLFilePath","resolve","slice","forEach","config","ruleFilePath","merge","createPrhEngineFromContents","yamlContents","dummyFilePath","fromYAML","content","mergePrh","engines","engines_","filter","engine","mainEngine","assertOptions","options","ruleContents","Error","createIgnoreNodeTypes","Syntax","nodeTypes","push","Link","BlockQuote","Emphasis","Header","forEachChange","changeSet","str","onChangeOfMatch","sortedDiffs","diffs","sort","a","b","index","delta","diff","result","expected","replace","g1","parseInt","matches","matchStartIndex","matchEndIndex","actual","rule","raw","getConfigBaseDir","context","process","cwd","textlintRcFilePath","configFile","dirname","reporter","userOptions","assign","textlintRCDir","prhEngineContent","prhEngineFiles","helper","getSource","report","fixer","RuleError","ignoreNodeTypes","Str","node","isChildNode","text","makeChangeSet","suffix","messages","fix","replaceTextRange","module","exports","linter"],"mappings":"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","file":"textlint-rule-prh.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\n/**\n * RegExp#flags polyfill\n */\nif (RegExp.prototype.flags === undefined) {\n    Object.defineProperty(RegExp.prototype, \"flags\", {\n        configurable: true,\n        get: function() {\n            return this.toString().match(/[gimuy]*$/)[0];\n        }\n    });\n}\n\nconst prh = require(\"prh\");\nconst path = require(\"path\");\nconst untildify = require(\"untildify\");\n\nconst defaultOptions = {\n    checkLink: false,\n    checkBlockQuote: false,\n    checkEmphasis: false,\n    checkHeader: true\n};\n\nfunction createPrhEngine(rulePaths, baseDir) {\n    if (rulePaths.length === 0) {\n        return null;\n    }\n    const expandedRulePaths = rulePaths.map(rulePath => untildify(rulePath));\n    const prhEngine = prh.fromYAMLFilePath(path.resolve(baseDir, expandedRulePaths[0]));\n    expandedRulePaths.slice(1).forEach(ruleFilePath => {\n        const config = prh.fromYAMLFilePath(path.resolve(baseDir, ruleFilePath));\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction createPrhEngineFromContents(yamlContents) {\n    if (yamlContents.length === 0) {\n        return null;\n    }\n    const dummyFilePath = \"\";\n    const prhEngine = prh.fromYAML(dummyFilePath, yamlContents[0]);\n    yamlContents.slice(1).forEach(content => {\n        const config = prh.fromYAML(dummyFilePath, content);\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction mergePrh(...engines) {\n    const engines_ = engines.filter(engine => !!engine);\n    const mainEngine = engines_[0];\n    engines_.slice(1).forEach(engine => {\n        mainEngine.merge(engine);\n    });\n    return mainEngine;\n}\n\nconst assertOptions = options => {\n    if (typeof options.ruleContents === \"undefined\" && typeof options.rulePaths === \"undefined\") {\n        throw new Error(`textlint-rule-prh require Rule Options.\nPlease set .textlinrc:\n{\n    \"rules\": {\n        \"prh\": {\n            \"rulePaths\" :[\"path/to/prh.yml\"]\n        }\n    }\n}\n`);\n    }\n};\n\nconst createIgnoreNodeTypes = (options, Syntax) => {\n    const nodeTypes = [];\n    if (!options.checkLink) {\n        nodeTypes.push(Syntax.Link);\n    }\n    if (!options.checkBlockQuote) {\n        nodeTypes.push(Syntax.BlockQuote);\n    }\n    if (!options.checkEmphasis) {\n        nodeTypes.push(Syntax.Emphasis);\n    }\n    if (!options.checkHeader) {\n        nodeTypes.push(Syntax.Header);\n    }\n    return nodeTypes;\n};\n\n/**\n * for each diff of changeSet\n * @param {ChangeSet} changeSet\n * @param {string} str\n * @param {function({\n            matchStartIndex: number,\n            matchEndIndex: number,\n            actual: string\n            expected: string\n        })}onChangeOfMatch\n */\nconst forEachChange = (changeSet, str, onChangeOfMatch) => {\n    const sortedDiffs = changeSet.diffs.sort(function(a, b) {\n        return a.index - b.index;\n    });\n    let delta = 0;\n    sortedDiffs.forEach(function(diff) {\n        const result = diff.expected.replace(/\\$([0-9]{1,2})/g, function(match, g1) {\n            const index = parseInt(g1);\n            if (index === 0 || diff.matches.length - 1 < index) {\n                return match;\n            }\n            return diff.matches[index] || \"\";\n        });\n        // matchStartIndex/matchEndIndex value is original position, not replaced position\n        // textlint use original position\n        const matchStartIndex = diff.index;\n        const matchEndIndex = matchStartIndex + diff.matches[0].length;\n        // actual => expected\n        const actual = str.slice(diff.index + delta, diff.index + delta + diff.matches[0].length);\n        const prh = diff.rule.raw.prh || null;\n        onChangeOfMatch({\n            matchStartIndex,\n            matchEndIndex,\n            actual: actual,\n            expected: result,\n            prh\n        });\n        str = str.slice(0, diff.index + delta) + result + str.slice(diff.index + delta + diff.matches[0].length);\n        delta += result.length - diff.matches[0].length;\n    });\n};\nconst getConfigBaseDir = context => {\n    if (typeof context.getConfigBaseDir === \"function\") {\n        return context.getConfigBaseDir() || process.cwd();\n    }\n    // Old fallback that use deprecated `config` value\n    // https://github.com/textlint/textlint/issues/294\n    const textlintRcFilePath = context.config ? context.config.configFile : null;\n    // .textlinrc directory\n    return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\nfunction reporter(context, userOptions = {}) {\n    assertOptions(userOptions);\n    const options = Object.assign({}, defaultOptions, userOptions);\n    // .textlinrc directory\n    const textlintRCDir = getConfigBaseDir(context);\n    // create prh config\n    const rulePaths = options.rulePaths || [];\n    const ruleContents = options.ruleContents || [];\n    // yaml file + yaml contents\n    const prhEngineContent = createPrhEngineFromContents(ruleContents);\n    const prhEngineFiles = createPrhEngine(rulePaths, textlintRCDir);\n    const prhEngine = mergePrh(prhEngineFiles, prhEngineContent);\n    const helper = new RuleHelper(context);\n    const { Syntax, getSource, report, fixer, RuleError } = context;\n    const ignoreNodeTypes = createIgnoreNodeTypes(options, Syntax);\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, ignoreNodeTypes)) {\n                return;\n            }\n            const text = getSource(node);\n            // to get position from index\n            // https://github.com/prh/prh/issues/29\n            const dummyFilePath = \"\";\n            const makeChangeSet = prhEngine.makeChangeSet(dummyFilePath, text);\n            forEachChange(makeChangeSet, text, ({ matchStartIndex, matchEndIndex, actual, expected, prh }) => {\n                // If result is not changed, should not report\n                if (actual === expected) {\n                    return;\n                }\n\n                const suffix = prh !== null ? \"\\n\" + prh : \"\";\n                const messages = actual + \" => \" + expected + suffix;\n                report(\n                    node,\n                    new RuleError(messages, {\n                        index: matchStartIndex,\n                        fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected)\n                    })\n                );\n            });\n        }\n    };\n}\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}