// LICENSE : MIT
"use strict";
/*

    (b)「~ないでも / はない」
    ~ない(否定助動詞/否定形容詞「ない」の連体形)+連用形「で」+とりたて助詞「も / は」+補助形容詞「ない」
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (context) {
    var RuleError = context.RuleError;


    var monaiTokens = [{
        "basic_form": ["ない", "無い"]
    }, {
        "surface_form": "で",
        "pos": "助詞"
    }, {
        "surface_form": "も",
        "pos": "助詞"
    }, {
        "basic_form": ["ない", "無い"],
        "pos": "形容詞"
    }];

    var nakuhaTokens = [{
        "basic_form": ["ない", "無い"]
    }, {
        "surface_form": "で",
        "conjugated_form": "連用形"
    }, {
        "surface_form": "は",
        "pos": "助詞"
    }, {
        "basic_form": ["ない", "無い"],
        "pos": "形容詞"
    }];
    var matchPatternないでもない = (0, _matchTokenStream2.default)(nakuhaTokens);
    var matchPatternないではない = (0, _matchTokenStream2.default)(monaiTokens);
    return function (token) {
        if (matchPatternないでもない(token)) {
            return new RuleError("二重否定: 〜ないでもない", {
                index: token.word_position - 1
            });
        }
        if (matchPatternないではない(token)) {
            return new RuleError("二重否定: 〜ないではない", {
                index: token.word_position - 1
            });
        }
    };
};

var _matchTokenStream = require("./../matchTokenStream");

var _matchTokenStream2 = _interopRequireDefault(_matchTokenStream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];
//# sourceMappingURL=naidemo-nai.js.map