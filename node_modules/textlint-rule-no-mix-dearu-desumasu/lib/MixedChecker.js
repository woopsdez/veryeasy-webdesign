// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _analyzeDesumasuDearu = require("analyze-desumasu-dearu");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MixedChecker = function () {
    /**
     * @param context
     * @param {{preferDearu:boolean, preferDesumasu: boolean}} options
     */
    function MixedChecker(context, options) {
        _classCallCheck(this, MixedChecker);

        this.context = context;
        /**
         * 明示的な優先するタイプの指定
         * @type {{preferDearu: boolean, preferDesumasu: boolean, isStrict: boolean}}
         */
        this.options = options;
        this.dearuCount = 0;
        this.desumasuCount = 0;
        this.dearuHitList = [];
        this.desumasuHitList = [];
        this._queue = Promise.resolve();
    }

    _createClass(MixedChecker, [{
        key: "check",
        value: function check(node, text) {
            var _this = this;

            this._queue = this._queue.then(function () {
                var analyzeOptions = {
                    ignoreConjunction: !_this.options.isStrict
                };
                return (0, _analyzeDesumasuDearu.analyze)(text, analyzeOptions).then(function (results) {
                    var retDearu = results.filter(_analyzeDesumasuDearu.isDearu);
                    var retDesumasu = results.filter(_analyzeDesumasuDearu.isDesumasu);
                    var dearuCount = _this.dearuCount + retDearu.length;
                    var desumasuCount = _this.desumasuCount + retDesumasu.length;
                    if (_this.dearuCount !== dearuCount) {
                        _this.dearuCount = dearuCount;
                        _this.dearuHitList.push({
                            node: node,
                            matches: retDearu
                        });
                    }
                    if (_this.desumasuCount !== desumasuCount) {
                        _this.desumasuCount = desumasuCount;
                        _this.desumasuHitList.push({
                            node: node,
                            matches: retDesumasu
                        });
                    }
                });
            });
        }

        /**
         * @param {IgnoreManger}ignoreManger
         * @returns {Promise.<TResult>}
         */

    }, {
        key: "checkout",
        value: function checkout(ignoreManger) {
            var _this2 = this;

            return this._queue.then(function () {
                if (!_this2.isOver()) {
                    return;
                }
                var RuleError = _this2.context.RuleError;
                var report = _this2.context.report;
                var overType = _this2.getOverType();
                var overHitList = _this2.overHitList(overType);
                // List
                overHitList.forEach(function (_ref) {
                    var node = _ref.node,
                        matches = _ref.matches;

                    // Node
                    var lastHitNode = node;
                    // Tokens
                    matches.forEach(function (token) {
                        var hitIndex = node.range[0] + token.index;
                        if (ignoreManger.isIgnoredIndex(hitIndex)) {
                            return;
                        }

                        var ruleError = new RuleError(_this2.outputMessage(token), {
                            index: token.index
                        });
                        report(lastHitNode, ruleError);
                    });
                });
            });
        }
    }, {
        key: "isOver",
        value: function isOver() {
            return this.dearuCount !== 0 && this.desumasuCount !== 0;
        }

        /**
         * 優先するtypeを返します。
         * @returns {*}
         */

    }, {
        key: "getOverType",
        value: function getOverType() {
            if (this.options.preferDearu) {
                return "である";
            } else if (this.options.preferDesumasu) {
                return "ですます";
            }
            if (this.dearuCount > this.desumasuCount) {
                return "である";
            } else {
                return "ですます";
            }
        }

        /**
         * hist node list
         * @param overType
         * @returns {Array}
         */

    }, {
        key: "overHitList",
        value: function overHitList(overType) {
            if (overType === "である") {
                return this.desumasuHitList;
            } else if (overType === "ですます") {
                return this.dearuHitList;
            }
        }

        /**
         * create message string
         * @param token
         * @returns {string}
         */

    }, {
        key: "outputMessage",
        value: function outputMessage(token) {
            var overType = this.getOverType();
            if (overType === "である") {
                // である優先 => 最後の"ですます"を表示
                return "\"\u3067\u3042\u308B\"\u8ABF \u3068 \"\u3067\u3059\u307E\u3059\"\u8ABF \u304C\u6DF7\u5728\n=> \"" + token.value + "\" \u304C\u3067\u3059\u307E\u3059\u8ABF\nTotal:\n\u3067\u3042\u308B  : " + this.dearuCount + "\n\u3067\u3059\u307E\u3059: " + this.desumasuCount + "\n";
            } else if (overType === "ですます") {
                // ですます優先 => 最後の"である"を表示
                return "\"\u3067\u3042\u308B\"\u8ABF \u3068 \"\u3067\u3059\u307E\u3059\"\u8ABF \u304C\u6DF7\u5728\n=> \"" + token.value + "\" \u304C\u3067\u3042\u308B\u8ABF\nTotal:\n\u3067\u3042\u308B  : " + this.dearuCount + "\n\u3067\u3059\u307E\u3059: " + this.desumasuCount + "\n";
            }
        }
    }]);

    return MixedChecker;
}();

exports.default = MixedChecker;
//# sourceMappingURL=MixedChecker.js.map