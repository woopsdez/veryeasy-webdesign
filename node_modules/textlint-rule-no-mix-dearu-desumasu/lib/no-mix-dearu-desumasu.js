// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PreferTypes = undefined;

var _textlintRuleHelper = require("textlint-rule-helper");

var _BodyMixedChecker = require("./BodyMixedChecker");

var _BodyMixedChecker2 = _interopRequireDefault(_BodyMixedChecker);

var _HeaderMixedChecker = require("./HeaderMixedChecker");

var _HeaderMixedChecker2 = _interopRequireDefault(_HeaderMixedChecker);

var _ListMixedChecker = require("./ListMixedChecker");

var _ListMixedChecker2 = _interopRequireDefault(_ListMixedChecker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PreferTypes = exports.PreferTypes = {
    DESUMASU: "ですます",
    DEARU: "である"
};
// デフォルトでその項目で多く出現している方を優先します。
// 明示的にpreferの設定した場合は、そちらを優先した内容をエラーとして表示します。
var defaultOptions = {
    "preferInHeader": "", // "である" or "ですます"
    "preferInBody": "", // "である" or "ですます"
    "preferInList": "", // "である" or "ですます"
    // 文末以外でも、敬体(ですます調)と常体(である調)を厳しくチェックするかどうか
    "strict": false
};

module.exports = function noMixedDearuDesumasu(context) {
    var _ref;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
    var Syntax = context.Syntax,
        getSource = context.getSource;

    var helper = new _textlintRuleHelper.RuleHelper(context);
    var ignoreManager = new _textlintRuleHelper.IgnoreNodeManager();
    var isStrict = options.strict !== undefined ? options.strict : defaultOptions.strict;
    var bodyChecker = new _BodyMixedChecker2.default(context, {
        preferDesumasu: options.preferInBody === PreferTypes.DESUMASU,
        preferDearu: options.preferInBody === PreferTypes.DEARU,
        isStrict: isStrict
    });
    var headerChecker = new _HeaderMixedChecker2.default(context, {
        preferDesumasu: options.preferInHeader === PreferTypes.DESUMASU,
        preferDearu: options.preferInHeader === PreferTypes.DEARU,
        isStrict: isStrict
    });
    var listChecker = new _ListMixedChecker2.default(context, {
        preferDesumasu: options.preferInList === PreferTypes.DESUMASU,
        preferDearu: options.preferInList === PreferTypes.DEARU,
        isStrict: isStrict
    });
    return _ref = {}, _defineProperty(_ref, Syntax.Header, function (node) {
        var text = getSource(node);
        headerChecker.check(node, text);
    }), _defineProperty(_ref, Syntax.ListItem, function (node) {
        var text = getSource(node);
        listChecker.check(node, text);
    }), _defineProperty(_ref, Syntax.Paragraph, function (node) {
        var ignoredNodeTypes = [Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis];
        // 無視リストのTypeが親にある場合は無視する
        if (helper.isChildNode(node, ignoredNodeTypes)) {
            return;
        }
        // 見出しと箇条書きは別途チェックするので Header > Str などは無視する
        if (helper.isChildNode(node, [Syntax.Header, Syntax.ListItem])) {
            return;
        }
        // childrenに無視するtypeがいた場合は無視リストに加える
        ignoreManager.ignoreChildrenByTypes(node, ignoredNodeTypes);
        // check
        var text = getSource(node);
        bodyChecker.check(node, text);
    }), _defineProperty(_ref, Syntax.Document + ":exit", function () {
        return Promise.all([bodyChecker.checkout(ignoreManager), headerChecker.checkout(ignoreManager), listChecker.checkout(ignoreManager)]);
    }), _ref;
};
//# sourceMappingURL=no-mix-dearu-desumasu.js.map