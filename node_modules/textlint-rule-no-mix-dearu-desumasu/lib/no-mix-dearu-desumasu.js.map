{"version":3,"sources":["../src/no-mix-dearu-desumasu.js"],"names":["PreferTypes","DESUMASU","DEARU","defaultOptions","module","exports","noMixedDearuDesumasu","context","options","Syntax","getSource","helper","ignoreManager","isStrict","strict","undefined","bodyChecker","preferDesumasu","preferInBody","preferDearu","headerChecker","preferInHeader","listChecker","preferInList","Header","node","text","check","ListItem","Paragraph","ignoredNodeTypes","Link","Code","Image","BlockQuote","Emphasis","isChildNode","ignoreChildrenByTypes","Document","Promise","all","checkout"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;AACO,IAAMA,oCAAc;AACvBC,cAAU,MADa;AAEvBC,WAAO;AAFgB,CAApB;AAIP;AACA;AACA,IAAMC,iBAAiB;AACnB,sBAAkB,EADC,EACG;AACtB,oBAAgB,EAFG,EAEG;AACtB,oBAAgB,EAHG,EAGG;AACtB;AACA,cAAU;AALS,CAAvB;;AAQAC,OAAOC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,OAA9B,EAAiE;AAAA;;AAAA,QAA1BC,OAA0B,uEAAhBL,cAAgB;AAAA,QACvEM,MADuE,GAClDF,OADkD,CACvEE,MADuE;AAAA,QAC/DC,SAD+D,GAClDH,OADkD,CAC/DG,SAD+D;;AAE9E,QAAMC,SAAS,mCAAeJ,OAAf,CAAf;AACA,QAAMK,gBAAgB,2CAAtB;AACA,QAAMC,WAAWL,QAAQM,MAAR,KAAmBC,SAAnB,GAA+BP,QAAQM,MAAvC,GAAgDX,eAAeW,MAAhF;AACA,QAAME,cAAc,+BAAqBT,OAArB,EAA8B;AAC9CU,wBAAgBT,QAAQU,YAAR,KAAyBlB,YAAYC,QADP;AAE9CkB,qBAAaX,QAAQU,YAAR,KAAyBlB,YAAYE,KAFJ;AAG9CW;AAH8C,KAA9B,CAApB;AAKA,QAAMO,gBAAgB,iCAAuBb,OAAvB,EAAgC;AAClDU,wBAAgBT,QAAQa,cAAR,KAA2BrB,YAAYC,QADL;AAElDkB,qBAAaX,QAAQa,cAAR,KAA2BrB,YAAYE,KAFF;AAGlDW;AAHkD,KAAhC,CAAtB;AAKA,QAAMS,cAAc,+BAAqBf,OAArB,EAA8B;AAC9CU,wBAAgBT,QAAQe,YAAR,KAAyBvB,YAAYC,QADP;AAE9CkB,qBAAaX,QAAQe,YAAR,KAAyBvB,YAAYE,KAFJ;AAG9CW;AAH8C,KAA9B,CAApB;AAKA,4CAEKJ,OAAOe,MAFZ,YAEoBC,IAFpB,EAEyB;AACjB,YAAMC,OAAOhB,UAAUe,IAAV,CAAb;AACAL,sBAAcO,KAAd,CAAoBF,IAApB,EAA0BC,IAA1B;AACH,KALL,yBAOKjB,OAAOmB,QAPZ,YAOsBH,IAPtB,EAO2B;AACnB,YAAMC,OAAOhB,UAAUe,IAAV,CAAb;AACAH,oBAAYK,KAAZ,CAAkBF,IAAlB,EAAwBC,IAAxB;AACH,KAVL,yBAYKjB,OAAOoB,SAZZ,YAYuBJ,IAZvB,EAY4B;AACpB,YAAMK,mBAAmB,CAACrB,OAAOsB,IAAR,EAActB,OAAOuB,IAArB,EAA2BvB,OAAOwB,KAAlC,EAAyCxB,OAAOyB,UAAhD,EAA4DzB,OAAO0B,QAAnE,CAAzB;AACA;AACA,YAAIxB,OAAOyB,WAAP,CAAmBX,IAAnB,EAAyBK,gBAAzB,CAAJ,EAAgD;AAC5C;AACH;AACD;AACA,YAAInB,OAAOyB,WAAP,CAAmBX,IAAnB,EAAyB,CAAChB,OAAOe,MAAR,EAAgBf,OAAOmB,QAAvB,CAAzB,CAAJ,EAAgE;AAC5D;AACH;AACD;AACAhB,sBAAcyB,qBAAd,CAAoCZ,IAApC,EAA0CK,gBAA1C;AACA;AACA,YAAMJ,OAAOhB,UAAUe,IAAV,CAAb;AACAT,oBAAYW,KAAZ,CAAkBF,IAAlB,EAAwBC,IAAxB;AACH,KA3BL,yBA4BKjB,OAAO6B,QAAP,GAAkB,OA5BvB,cA4BiC;AACzB,eAAOC,QAAQC,GAAR,CAAY,CACfxB,YAAYyB,QAAZ,CAAqB7B,aAArB,CADe,EAEfQ,cAAcqB,QAAd,CAAuB7B,aAAvB,CAFe,EAGfU,YAAYmB,QAAZ,CAAqB7B,aAArB,CAHe,CAAZ,CAAP;AAKH,KAlCL;AAoCH,CAxDD","file":"no-mix-dearu-desumasu.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper, IgnoreNodeManager} from \"textlint-rule-helper\";\nimport BodyMixedChecker from \"./BodyMixedChecker\";\nimport HeaderMixedChecker from \"./HeaderMixedChecker\";\nimport ListMixedChecker from \"./ListMixedChecker\";\nexport const PreferTypes = {\n    DESUMASU: \"ですます\",\n    DEARU: \"である\"\n};\n// デフォルトでその項目で多く出現している方を優先します。\n// 明示的にpreferの設定した場合は、そちらを優先した内容をエラーとして表示します。\nconst defaultOptions = {\n    \"preferInHeader\": \"\", // \"である\" or \"ですます\"\n    \"preferInBody\": \"\",   // \"である\" or \"ですます\"\n    \"preferInList\": \"\",   // \"である\" or \"ですます\"\n    // 文末以外でも、敬体(ですます調)と常体(である調)を厳しくチェックするかどうか\n    \"strict\": false\n};\n\nmodule.exports = function noMixedDearuDesumasu(context, options = defaultOptions) {\n    const {Syntax, getSource} = context;\n    const helper = new RuleHelper(context);\n    const ignoreManager = new IgnoreNodeManager();\n    const isStrict = options.strict !== undefined ? options.strict : defaultOptions.strict;\n    const bodyChecker = new BodyMixedChecker(context, {\n        preferDesumasu: options.preferInBody === PreferTypes.DESUMASU,\n        preferDearu: options.preferInBody === PreferTypes.DEARU,\n        isStrict\n    });\n    const headerChecker = new HeaderMixedChecker(context, {\n        preferDesumasu: options.preferInHeader === PreferTypes.DESUMASU,\n        preferDearu: options.preferInHeader === PreferTypes.DEARU,\n        isStrict\n    });\n    const listChecker = new ListMixedChecker(context, {\n        preferDesumasu: options.preferInList === PreferTypes.DESUMASU,\n        preferDearu: options.preferInList === PreferTypes.DEARU,\n        isStrict\n    });\n    return {\n        // 見出し\n        [Syntax.Header](node){\n            const text = getSource(node);\n            headerChecker.check(node, text);\n        },\n        // 箇条書き\n        [Syntax.ListItem](node){\n            const text = getSource(node);\n            listChecker.check(node, text);\n        },\n        // 本文\n        [Syntax.Paragraph](node){\n            const ignoredNodeTypes = [Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis];\n            // 無視リストのTypeが親にある場合は無視する\n            if (helper.isChildNode(node, ignoredNodeTypes)) {\n                return;\n            }\n            // 見出しと箇条書きは別途チェックするので Header > Str などは無視する\n            if (helper.isChildNode(node, [Syntax.Header, Syntax.ListItem])) {\n                return;\n            }\n            // childrenに無視するtypeがいた場合は無視リストに加える\n            ignoreManager.ignoreChildrenByTypes(node, ignoredNodeTypes);\n            // check\n            const text = getSource(node);\n            bodyChecker.check(node, text);\n        },\n        [Syntax.Document + \":exit\"](){\n            return Promise.all([\n                bodyChecker.checkout(ignoreManager),\n                headerChecker.checkout(ignoreManager),\n                listChecker.checkout(ignoreManager)\n            ]);\n        }\n    }\n};"]}