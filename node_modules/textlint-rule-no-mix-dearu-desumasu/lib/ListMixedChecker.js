// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _MixedChecker2 = require("./MixedChecker");

var _MixedChecker3 = _interopRequireDefault(_MixedChecker2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListMixedChecker = function (_MixedChecker) {
    _inherits(ListMixedChecker, _MixedChecker);

    function ListMixedChecker() {
        _classCallCheck(this, ListMixedChecker);

        return _possibleConstructorReturn(this, (ListMixedChecker.__proto__ || Object.getPrototypeOf(ListMixedChecker)).apply(this, arguments));
    }

    _createClass(ListMixedChecker, [{
        key: "outputMessage",
        value: function outputMessage(token) {
            return "箇条書き: " + _get(ListMixedChecker.prototype.__proto__ || Object.getPrototypeOf(ListMixedChecker.prototype), "outputMessage", this).call(this, token);
        }
    }]);

    return ListMixedChecker;
}(_MixedChecker3.default);

exports.default = ListMixedChecker;
//# sourceMappingURL=ListMixedChecker.js.map