{"version":3,"sources":["../src/textlint-rule-max-comma.js"],"names":[],"mappings":";AACA;;AACA;;;;AACA,IAAM,SAAS,QAAQ,mBAAR,CAAf;AACA,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACxB,WAAO,KAAK,KAAL,CAAW,GAAX,EAAgB,MAAhB,GAAyB,CAAhC;AACH;AACD,IAAM,iBAAiB;;AAEnB,SAAK;AAFc,CAAvB;AAIA,OAAO,OAAP,GAAiB,UAAS,OAAT,EAA4C;AAAA,QAA1B,OAA0B,yDAAhB,cAAgB;;AACzD,QAAM,WAAW,QAAQ,GAAR,IAAe,eAAe,GAA/C;AADyD,QAElD,MAFkD,GAEV,OAFU,CAElD,MAFkD;AAAA,QAE1C,SAF0C,GAEV,OAFU,CAE1C,SAF0C;AAAA,QAE/B,MAF+B,GAEV,OAFU,CAE/B,MAF+B;AAAA,QAEvB,SAFuB,GAEV,OAFU,CAEvB,SAFuB;;AAGzD,+BACK,OAAO,SADZ,YACuB,IADvB,EAC4B;AACpB,YAAM,kBAAkB,OAAO,IAAP,EAAa,UAAC,IAAD,EAAU;AAC3C,mBAAO,KAAK,IAAL,KAAc,OAAO,IAA5B;AACH,SAFuB,CAAxB;AAGA,YAAI,CAAC,eAAL,EAAsB;AAClB;AACH;AACD,YAAM,QAAQ,MAAM,OAAN,CAAc,gBAAgB,QAA9B,IAA0C,gBAAgB,QAAhB,CAAyB,GAAzB,CAA6B,iBAAS;AAC1F,mBAAO,UAAU,KAAV,CAAP;AACH,SAFuD,CAA1C,GAET,EAFL;AAGA,YAAM,OAAO,MAAM,IAAN,CAAW,EAAX,CAAb;AACA,YAAM,YAAY,6BAAM,IAAN,EAAY,MAAZ,CAAmB;AAAA,mBAAQ,KAAK,IAAL,KAAc,yBAAe,QAArC;AAAA,SAAnB,CAAlB;AACA,kBAAU,OAAV,CAAkB,oBAAY;AAC1B,gBAAM,gBAAgB,SAAS,KAA/B;AACA,gBAAM,QAAQ,aAAa,aAAb,CAAd;AACA,gBAAI,QAAQ,QAAZ,EAAsB;AAClB,oBAAM,eAAe;AACjB,0BAAM,SAAS,GAAT,CAAa,KAAb,CAAmB,IAAnB,GAA0B,CADf;AAEjB,4BAAQ,SAAS,GAAT,CAAa,KAAb,CAAmB;AAFV,iBAArB;AAIA,uBAAO,IAAP,EAAa,IAAI,SAAJ,mEAA8E,QAA9E,QAA2F,YAA3F,CAAb;AACH;AACJ,SAVD;AAWH,KAxBL;AA0BH,CA7BD","file":"textlint-rule-max-comma.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {split, Syntax as SentenceSyntax} from \"sentence-splitter\";\nconst filter = require(\"unist-util-filter\");\nfunction countOfComma(text) {\n    return text.split(\",\").length - 1;\n}\nconst defaultOptions = {\n    // default: max comma count is 4\n    max: 4\n};\nmodule.exports = function(context, options = defaultOptions) {\n    const maxComma = options.max || defaultOptions.max;\n    const {Syntax, RuleError, report, getSource} = context;\n    return {\n        [Syntax.Paragraph](node){\n            const nodeWithoutCode = filter(node, (node) => {\n                return node.type !== Syntax.Code;\n            });\n            if (!nodeWithoutCode) {\n                return;\n            }\n            const texts = Array.isArray(nodeWithoutCode.children) ? nodeWithoutCode.children.map(child => {\n                return getSource(child);\n            }) : [];\n            const text = texts.join(\"\");\n            const sentences = split(text).filter(node => node.type === SentenceSyntax.Sentence);\n            sentences.forEach(sentence => {\n                const sentenceValue = sentence.value;\n                const count = countOfComma(sentenceValue);\n                if (count > maxComma) {\n                    const paddingStart = {\n                        line: sentence.loc.start.line - 1,\n                        column: sentence.loc.start.column\n                    };\n                    report(node, new RuleError(`This sentence exceeds the maximum count of comma. Maximum is ${maxComma}.`, paddingStart));\n                }\n            });\n        }\n    }\n};"]}