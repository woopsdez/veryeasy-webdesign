// LICENSE : MIT
"use strict";

var _sentenceSplitter = require("sentence-splitter");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var filter = require("unist-util-filter");
function countOfComma(text) {
    return text.split(",").length - 1;
}
var defaultOptions = {
    // default: max comma count is 4
    max: 4
};
module.exports = function (context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? defaultOptions : arguments[1];

    var maxComma = options.max || defaultOptions.max;
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        var nodeWithoutCode = filter(node, function (node) {
            return node.type !== Syntax.Code;
        });
        if (!nodeWithoutCode) {
            return;
        }
        var texts = Array.isArray(nodeWithoutCode.children) ? nodeWithoutCode.children.map(function (child) {
            return getSource(child);
        }) : [];
        var text = texts.join("");
        var sentences = (0, _sentenceSplitter.split)(text).filter(function (node) {
            return node.type === _sentenceSplitter.Syntax.Sentence;
        });
        sentences.forEach(function (sentence) {
            var sentenceValue = sentence.value;
            var count = countOfComma(sentenceValue);
            if (count > maxComma) {
                var paddingStart = {
                    line: sentence.loc.start.line - 1,
                    column: sentence.loc.start.column
                };
                report(node, new RuleError("This sentence exceeds the maximum count of comma. Maximum is " + maxComma + ".", paddingStart));
            }
        });
    });
};
//# sourceMappingURL=textlint-rule-max-comma.js.map