{"version":3,"sources":["../src/4.1.1.js"],"names":["brackets","leftBrackets","map","RegExp","bracket","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","forEach","pattern","index","match","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;AACA;;;;;;;;AAOA;;AACA;;;;AACA,IAAMA,WAAW,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,CAAjB;AACA,IAAMC,eAAeD,SAASE,GAAT,CAAa,mBAAW;AACzC,WAAO,IAAIC,MAAJ,CAAW,QAAQC,OAAnB,EAA4B,GAA5B,CAAP;AACH,CAFoB,CAArB;AAGA,IAAIC,WAAW,SAASA,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QAChCC,MADgC,GACgBD,OADhB,CAChCC,MADgC;AAAA,QACxBC,SADwB,GACgBF,OADhB,CACxBE,SADwB;AAAA,QACbC,MADa,GACgBH,OADhB,CACbG,MADa;AAAA,QACLC,KADK,GACgBJ,OADhB,CACLI,KADK;AAAA,QACEC,SADF,GACgBL,OADhB,CACEK,SADF;;AAEtC,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACuB;AACf,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAIQ,OAAOH,UAAUE,IAAV,CAAX;AACAZ,qBAAac,OAAb,CAAqB,mBAAW;AAC5B,kDAAqBD,IAArB,EAA2BE,OAA3B,EAAoCD,OAApC,CAA4C,iBAAS;AAAA,oBACzCE,KADyC,GAC/BC,KAD+B,CACzCD,KADyC;;AAEjDR,uBACII,IADJ,EAEI,IAAIL,SAAJ,CAAc,kCAAd,EAAkD;AAC9CS,2BAAOA,KADuC;AAE9CE,yBAAKT,MAAMU,gBAAN,CAAuB,CAACH,KAAD,EAAQA,QAAQ,CAAhB,CAAvB,EAA2C,EAA3C;AAFyC,iBAAlD,CAFJ;AAOH,aATD;AAUH,SAXD;AAYH,KAlBL;AAoBH,CAtBD;AAuBAI,OAAOC,OAAP,GAAiB;AACbC,YAAQlB,QADK;AAEbK,WAAOL;AAFM,CAAjB","file":"4.1.1.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n4.1.1. 句点(。)\n句点(。)は「全角」で表記します。\n句点は文の終わりに付けます。\n文中にかぎかっこが入る場合は、閉じかっこの前に句点を打ちません。\n文中に丸かっこが入る場合も閉じかっこの前に句点を打ちません。。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nconst brackets = [\"」\", \"）\", \"\\\\)\"];\nconst leftBrackets = brackets.map(bracket => {\n    return new RegExp(\"(。)\" + bracket, \"g\");\n});\nvar reporter = function reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            leftBrackets.forEach(pattern => {\n                matchCaptureGroupAll(text, pattern).forEach(match => {\n                    const { index } = match;\n                    report(\n                        node,\n                        new RuleError(\"文中にかぎかっこが入る場合は、閉じかっこの前に句点を打ちません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}