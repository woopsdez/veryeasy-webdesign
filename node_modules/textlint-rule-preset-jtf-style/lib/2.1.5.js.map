{"version":3,"sources":["../src/2.1.5.js"],"names":["toZenkaku","string","convert","toString","reporter","context","Syntax","RuleError","fixer","report","getSource","dictRule","rulePaths","join","__dirname","originalStrRule","Str","node","text","matches","forEach","index","match","fix","replaceTextRange","length","module","exports","linter"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;AASA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AACA;;;;;AAKA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,WAAO,oBAAKA,MAAL,EACFC,OADE,CACM,IADN,EACY,IADZ,EAEFC,QAFE,EAAP;AAGH;;AAED,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QACjBC,MADiB,GAC+BD,OAD/B,CACjBC,MADiB;AAAA,QACTC,SADS,GAC+BF,OAD/B,CACTE,SADS;AAAA,QACEC,KADF,GAC+BH,OAD/B,CACEG,KADF;AAAA,QACSC,MADT,GAC+BJ,OAD/B,CACSI,MADT;AAAA,QACiBC,SADjB,GAC+BL,OAD/B,CACiBK,SADjB;AAEvB;;AACA,QAAIC,WAAW,0BAAIH,KAAJ,CAAUH,OAAV,EAAmB;AAC9BO,mBAAW,CAAC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,MAA3B,EAAmC,WAAnC,CAAD;AADmB,KAAnB,CAAf;AAGA,QAAIC,kBAAkBJ,SAASL,OAAOU,GAAhB,CAAtB;AACA;AACAL,aAASL,OAAOU,GAAhB,IAAuB,UAASC,IAAT,EAAe;AAClCF,wBAAgBE,IAAhB;AACA,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBZ,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAMa,OAAOR,UAAUO,IAAV,CAAb;AACA,YAAME,UAAU,sCAAqBD,IAArB,EAA2B,qBAA3B,CAAhB;AACAC,gBAAQC,OAAR,CAAgB,iBAAS;AAAA,gBACbC,KADa,GACGC,KADH,CACbD,KADa;AAAA,gBACNH,IADM,GACGI,KADH,CACNJ,IADM;;AAErBT,mBACIQ,IADJ,EAEI,IAAIV,SAAJ,CAAc,kBAAd,EAAkC;AAC9Bc,uBAAOA,KADuB;AAE9BE,qBAAKf,MAAMgB,gBAAN,CAAuB,CAACH,KAAD,EAAQA,QAAQH,KAAKO,MAArB,CAAvB,EAAqDzB,UAAUkB,IAAV,CAArD;AAFyB,aAAlC,CAFJ;AAOH,SATD;AAUH,KAjBD;AAkBA,WAAOP,QAAP;AACH;AACDe,OAAOC,OAAP,GAAiB;AACbC,YAAQxB,QADK;AAEbI,WAAOJ;AAFM,CAAjB","file":"2.1.5.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.5.カタカナ\nカタカナは「全角」で表記します。\n半角カタカナは特殊な用途を除いて、原則として使いません。\n\nHalfwidth Katakana variants（半角片仮名）\n\\uFF65-\\uFF9F とする\nhttp://www.asahi-net.or.jp/~ax2s-kmtn/ref/unicode/uff00.html\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { hanKarakanaRegExp } from \"./util/regexp\";\nimport prh from \"textlint-rule-prh\";\nimport path from \"path\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport moji from \"moji\";\n/**\n * 半角カタカナを全角カタカナに変換\n *\n * @param {String} str 変換したい文字列\n */\nfunction toZenkaku(string) {\n    return moji(string)\n        .convert(\"HK\", \"ZK\")\n        .toString();\n}\n\nfunction reporter(context) {\n    let { Syntax, RuleError, fixer, report, getSource } = context;\n    // 辞書ベースのカタカタ表記のチェックを行う\n    let dictRule = prh.fixer(context, {\n        rulePaths: [path.join(__dirname, \"..\", \"dict\", \"2.1.5.yml\")]\n    });\n    let originalStrRule = dictRule[Syntax.Str];\n    // 半角カタカナの使用をチェックする\n    dictRule[Syntax.Str] = function(node) {\n        originalStrRule(node);\n        if (!isUserWrittenNode(node, context)) {\n            return;\n        }\n        const text = getSource(node);\n        const matches = matchCaptureGroupAll(text, /([\\uFF65-\\uFF9F]+)/g);\n        matches.forEach(match => {\n            const { index, text } = match;\n            report(\n                node,\n                new RuleError(\"カタカナは「全角」で表記します。\", {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + text.length], toZenkaku(text))\n                })\n            );\n        });\n    };\n    return dictRule;\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}