{"version":3,"sources":["../src/4.3.2.js"],"names":["rx","replaceSymbol","newSymbol","symbol","Error","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","matchRegExp","forEach","index","match","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;AACA;;;;;;;;AAKA;;AACA;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,KAAK,oBAAK,GAAL,CAAX;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB,SAAU;AAC5B,QAAIC,YAAY;AACZ,aAAK,GADO;AAEZ,aAAK;AAFO,MAGdC,MAHc,CAAhB;AAIA,QAAI,CAACD,SAAL,EAAgB;AACZ,cAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACH;AACD,WAAOF,SAAP;AACH,CATD;AAUA,SAASG,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QACjBC,MADiB,GAC+BD,OAD/B,CACjBC,MADiB;AAAA,QACTC,SADS,GAC+BF,OAD/B,CACTE,SADS;AAAA,QACEC,MADF,GAC+BH,OAD/B,CACEG,MADF;AAAA,QACUC,KADV,GAC+BJ,OAD/B,CACUI,KADV;AAAA,QACiBC,SADjB,GAC+BL,OAD/B,CACiBK,SADjB;;AAEvB,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACuB;AACf,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD;AACA,YAAMQ,OAAOH,UAAUE,IAAV,CAAb;AACA,YAAME,cAAcf,EAAd,yCAAN;AACA,8CAAqBc,IAArB,EAA2BC,WAA3B,EAAwCC,OAAxC,CAAgD,iBAAS;AAAA,gBAC7CC,KAD6C,GACnCC,KADmC,CAC7CD,KAD6C;;AAErDR,mBACII,IADJ,EAEI,IAAIL,SAAJ,CAAc,uCAAd,EAAuD;AACnDS,uBAAOA,KAD4C;AAEnDE,qBAAKT,MAAMU,gBAAN,CAAuB,CAACH,KAAD,EAAQA,QAAQ,CAAhB,CAAvB,EAA2ChB,cAAciB,MAAMJ,IAApB,CAA3C;AAF8C,aAAvD,CAFJ;AAOH,SATD;AAUH,KAlBL;AAoBH;AACDO,OAAOC,OAAP,GAAiB;AACbC,YAAQlB,QADK;AAEbK,WAAOL;AAFM,CAAjB","file":"4.3.2.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n4.3.2.大かっこ［］\nコンピューターの画面用語などの特殊な表記で使用します。\n全角の大かっこを使用します\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport regx from \"regx\";\nimport { japaneseRegExp } from \"./util/regexp\";\nconst rx = regx(\"g\");\n\nconst replaceSymbol = symbol => {\n    var newSymbol = {\n        \"[\": \"［\",\n        \"]\": \"］\"\n    }[symbol];\n    if (!newSymbol) {\n        throw new Error(\"fail to replace symbol\");\n    }\n    return newSymbol;\n};\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            // 半角のかっこ[]は使用しないで全角のかっこを使用する\n            const text = getSource(node);\n            const matchRegExp = rx`(?:${japaneseRegExp})([\\[\\]])`;\n            matchCaptureGroupAll(text, matchRegExp).forEach(match => {\n                const { index } = match;\n                report(\n                    node,\n                    new RuleError(\"半角の大かっこ[]が使用されています。全角のかっこ［］を使用してください。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + 1], replaceSymbol(match.text))\n                    })\n                );\n            });\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}