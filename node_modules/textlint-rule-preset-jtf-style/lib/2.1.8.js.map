{"version":3,"sources":["../src/2.1.8.js"],"names":["toHankaku","string","convert","toString","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","matchRegExp","forEach","index","match","fix","replaceTextRange","length","module","exports","linter"],"mappings":"AAAA;AACA;AACA;;;;;;;AAMA;;AACA;;;;AACA;;;;;;AACA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,WAAO,oBAAKA,MAAL,EACFC,OADE,CACM,IADN,EACY,IADZ,EAEFC,QAFE,EAAP;AAGH;AACD,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QACjBC,MADiB,GAC+BD,OAD/B,CACjBC,MADiB;AAAA,QACTC,SADS,GAC+BF,OAD/B,CACTE,SADS;AAAA,QACEC,MADF,GAC+BH,OAD/B,CACEG,MADF;AAAA,QACUC,KADV,GAC+BJ,OAD/B,CACUI,KADV;AAAA,QACiBC,SADjB,GAC+BL,OAD/B,CACiBK,SADjB;;AAEvB,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACuB;AACf,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAMQ,OAAOH,UAAUE,IAAV,CAAb;AACA,YAAME,cAAc,UAApB;AACA,8CAAqBD,IAArB,EAA2BC,WAA3B,EAAwCC,OAAxC,CAAgD,iBAAS;AAAA,gBAC7CC,KAD6C,GAC7BC,KAD6B,CAC7CD,KAD6C;AAAA,gBACtCH,IADsC,GAC7BI,KAD6B,CACtCJ,IADsC;;AAErDL,mBACII,IADJ,EAEI,IAAIL,SAAJ,CAAc,kBAAd,EAAkC;AAC9BS,uBAAOA,KADuB;AAE9BE,qBAAKT,MAAMU,gBAAN,CAAuB,CAACH,KAAD,EAAQA,QAAQH,KAAKO,MAArB,CAAvB,EAAqDpB,UAAUa,IAAV,CAArD;AAFyB,aAAlC,CAFJ;AAOH,SATD;AAUH,KAjBL;AAmBH;AACDQ,OAAOC,OAAP,GAAiB;AACbC,YAAQnB,QADK;AAEbK,WAAOL;AAFM,CAAjB","file":"2.1.8.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.8.算用数字\n算用数字は「半角」で表記します。\n用途によっては全角を許容します。\nただし、表記をできるだけ統一するため、特別な理由がない限り半角での表記を原則とします。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport moji from \"moji\";\nimport { matchCaptureGroupAll } from \"match-index\";\nfunction toHankaku(string) {\n    return moji(string)\n        .convert(\"ZE\", \"HE\")\n        .toString();\n}\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            const matchRegExp = /([０-９]+)/;\n            matchCaptureGroupAll(text, matchRegExp).forEach(match => {\n                const { index, text } = match;\n                report(\n                    node,\n                    new RuleError(\"算用数字は「半角」で表記します。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + text.length], toHankaku(text))\n                    })\n                );\n            });\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}