{"version":3,"sources":["../src/1.2.1.js"],"names":["rx","leftTarget","rightTarget","replaceSymbol","reporter","Syntax","context","RuleError","report","fixer","getSource","Str","node","text","leftMatches","rightMatches","matches","forEach","symbol","match","indexOfSymbol","index","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAOA;;;;;;;;AANA,IAAMA,KAAK,oBAAK,GAAL,CAAX;AACA;;;;;;;AAOA;AACA,IAAMC,aAAaD,EAAb,yCAAN;AAIA;AACA,IAAME,cAAcF,EAAd,0CAAN;AAIA;AACA,IAAMG,gBAAgB;AAClB,SAAK,GADa;AAElB,SAAK;AAFa,CAAtB;;AAKA,IAAMC,WAAW,SAAXA,QAAW,UAAW;AAAA,QAClBC,MADkB,GAC8BC,OAD9B,CAClBD,MADkB;AAAA,QACVE,SADU,GAC8BD,OAD9B,CACVC,SADU;AAAA,QACCC,MADD,GAC8BF,OAD9B,CACCE,MADD;AAAA,QACSC,KADT,GAC8BH,OAD9B,CACSG,KADT;AAAA,QACgBC,SADhB,GAC8BJ,OAD9B,CACgBI,SADhB;;AAExB,+BACKL,OAAOM,GADZ,YACiBC,IADjB,EACuB;AACf,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBN,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAMO,OAAOH,UAAUE,IAAV,CAAb;AACA,YAAME,cAAc,sCAAqBD,IAArB,EAA2BZ,UAA3B,CAApB;AACA,YAAMc,eAAe,sCAAqBF,IAArB,EAA2BX,WAA3B,CAArB;AACA,YAAMc,UAAU,4BAAaF,WAAb,EAA0BC,YAA1B,CAAhB;AACAC,gBAAQC,OAAR,CAAgB,iBAAS;AACrB,gBAAMC,SAASf,cAAcgB,MAAMN,IAApB,CAAf;AACA,gBAAMO,gBAAgBD,MAAME,KAA5B;AACAb,mBACII,IADJ,EAEI,IAAIL,SAAJ,CAAc,sDAAd,EAAsE;AAClEc,uBAAOD,aAD2D;AAElEE,qBAAKb,MAAMc,gBAAN,CAAuB,CAACH,aAAD,EAAgBA,gBAAgB,CAAhC,CAAvB,EAA2DF,MAA3D;AAF6D,aAAtE,CAFJ;AAOH,SAVD;AAWH,KApBL;AAsBH,CAxBD;AAyBAM,OAAOC,OAAP,GAAiB;AACbC,YAAQtB,QADK;AAEbK,WAAOL;AAFM,CAAjB","file":"1.2.1.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport regx from \"regx\";\nimport { japaneseRegExp } from \"./util/regexp\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport mergeMatches from \"./util/merge-matches\";\nconst rx = regx(\"g\");\n/*\n1.2.1. 句点(。)と読点(、)\n句読点には全角の「、」と「。」を使います。和文の句読点としてピリオド(.)とカンマ(,)を使用しません。\n「4.1.1 句点(。)」と「4.1.2 読点(、)」を参照してください。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\n\n// [,.]{日本語}\nconst leftTarget = rx`\n        ([,\\.])\n        ${japaneseRegExp}\n    `;\n// {日本語}[,.]\nconst rightTarget = rx`\n        ${japaneseRegExp}\n        ([,\\.])\n    `;\n// . => 。 の置換マップ\nconst replaceSymbol = {\n    \".\": \"。\",\n    \",\": \"、\"\n};\n\nconst reporter = context => {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            const leftMatches = matchCaptureGroupAll(text, leftTarget);\n            const rightMatches = matchCaptureGroupAll(text, rightTarget);\n            const matches = mergeMatches(leftMatches, rightMatches);\n            matches.forEach(match => {\n                const symbol = replaceSymbol[match.text];\n                const indexOfSymbol = match.index;\n                report(\n                    node,\n                    new RuleError(\"句読点には全角の「、」と「。」を使います。和文の句読点としてピリオド(.)とカンマ(,)を使用しません。\", {\n                        index: indexOfSymbol,\n                        fix: fixer.replaceTextRange([indexOfSymbol, indexOfSymbol + 1], symbol)\n                    })\n                );\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}