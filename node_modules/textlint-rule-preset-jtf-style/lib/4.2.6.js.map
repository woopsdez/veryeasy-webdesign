{"version":3,"sources":["../src/4.2.6.js"],"names":["rx","module","exports","context","Syntax","RuleError","report","getSource","Str","node","text","rightMatches","leftMatches","matches","forEach","index","match"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;AAMA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;AACA,IAAMA,KAAK,oBAAK,GAAL,CAAX;AACAC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAAA,QACzBC,MADyB,GACgBD,OADhB,CACzBC,MADyB;AAAA,QACjBC,SADiB,GACgBF,OADhB,CACjBE,SADiB;AAAA,QACNC,MADM,GACgBH,OADhB,CACNG,MADM;AAAA,QACEC,SADF,GACgBJ,OADhB,CACEI,SADF;;AAE/B,+BACKH,OAAOI,GADZ,YACiBC,IADjB,EACuB;AACf,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBN,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAIO,OAAOH,UAAUE,IAAV,CAAX;AACA;AACA;AACA,YAAME,eAAe,sCAAqBD,IAArB,EAA2BV,EAA3B,0CAArB;AACA;AACA,YAAMY,cAAc,sCAAqBF,IAArB,EAA2BV,EAA3B,2CAApB;AACA,YAAMa,UAAU,4BAAaD,WAAb,EAA0BD,YAA1B,CAAhB;AACAE,gBAAQC,OAAR,CAAgB,iBAAS;AAAA,gBACbC,KADa,GACHC,KADG,CACbD,KADa;;AAErBT,mBACIG,IADJ,EAEI,IAAIJ,SAAJ,kRAGI;AACIU,uBAAOA;AADX,aAHJ,CAFJ;AAUH,SAZD;AAaH,KAzBL;AA2BH,CA7BD","file":"4.2.6.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n4.2.6.ハイフン(-)\n原則として和文ではハイフン(-)を使用しません。\n使用する場合は半角で表記します。原文でハイフンが使われている場合も、和文では使用しません。\n例外は、住所や電話番号の区切りに使う場合です。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport regx from \"regx\";\nimport { japaneseRegExp } from \"./util/regexp\";\nimport mergeMatches from \"./util/merge-matches\";\nconst rx = regx(\"g\");\nmodule.exports = function(context) {\n    let { Syntax, RuleError, report, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            // 和文ではハイフン(-)を使用しません\n            // right\n            const rightMatches = matchCaptureGroupAll(text, rx`${japaneseRegExp}(\\-)`);\n            // left\n            const leftMatches = matchCaptureGroupAll(text, rx`(\\-)${japaneseRegExp}`);\n            const matches = mergeMatches(leftMatches, rightMatches);\n            matches.forEach(match => {\n                const { index } = match;\n                report(\n                    node,\n                    new RuleError(\n                        `原則として和文ではハイフン(-)を使用しません。\n例外は、住所や電話番号の区切りに使う場合です。`,\n                        {\n                            index: index\n                        }\n                    )\n                );\n            });\n        }\n    };\n};\n"]}