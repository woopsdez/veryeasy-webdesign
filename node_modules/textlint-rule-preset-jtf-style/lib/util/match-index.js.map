{"version":3,"sources":["../../src/util/match-index.js"],"names":[],"mappings":"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","file":"match-index.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst flagsGetter = require('regexp.prototype.flags');\nconst assert = require(\"assert\");\n\n/**\n * @typedef {Object} MatchCaptureGroup\n * @property {string} text - text is matched texts\n * @property {number} index - index is start of match\n */\nexport function matchCaptureGroupAll(text, regExp) {\n    const source = regExp.source;\n    assert(source.indexOf(\"(\") >= 0, \"RegExp should contain capture group at least one\");\n    const all = matchAll(text, regExp);\n    const captureGroups = [];\n    all.forEach(match => {\n        match.captureGroups.forEach(captureGroup => {\n            captureGroups.push(captureGroup);\n        });\n    });\n    return captureGroups;\n}\n/**\n *\n * @param {string} text\n * @param {RegExp} regExp\n * @returns {Array}\n * @see reference https://github.com/tc39/String.prototype.matchAll\n */\nexport function matchAll(text, regExp) {\n    const matches = [];\n    let flags = regExp.flags || flagsGetter(regExp);\n    if (flags.indexOf('g') === -1) {\n        flags = 'g' + flags;\n    }\n    const rx = new RegExp(regExp.source, flags);\n    text.replace(rx, function () {\n        const matchAll = Array.prototype.slice.call(arguments, 0, -2);\n        const match = {};\n        match.all = matchAll;\n\n        match.input = arguments[arguments.length - 1];\n        match.index = arguments[arguments.length - 2];\n        const groups = matchAll.slice(1);\n\n        const captureGroups = [];\n        for (let cursor = match.index, l = groups.length, i = 0; i < l; i++) {\n            let index = cursor;\n\n            if (i + 1 !== l && groups[i] !== groups[i + 1]) {\n                const nextIndex = text.indexOf(groups[i + 1], cursor);\n                while (true) {\n                    const currentIndex = text.indexOf(groups[i], index);\n                    if (currentIndex !== -1 && currentIndex <= nextIndex) {\n                        index = currentIndex + 1;\n                    } else {\n                        break;\n                    }\n                }\n                index--;\n            } else {\n                index = text.indexOf(groups[i], cursor);\n            }\n            cursor = index + groups[i].length;\n            const captureGroup = {\n                text: groups[i],\n                index\n            };\n            captureGroups.push(captureGroup);\n        }\n        match.captureGroups = captureGroups;\n        matches.push(match);\n        /*\n            index,\n            input,\n            all,\n            captureGroups = [{\n                text,\n                index\n            }]\n         */\n    });\n    return matches;\n}\n"]}