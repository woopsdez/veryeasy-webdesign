// LICENSE : MIT
"use strict";

var _templateObject = _taggedTemplateLiteral(["", "( )", ""], ["", "( )", ""]);

var _nodeUtil = require("./util/node-util");

var _matchIndex = require("match-index");

var _regx = require("regx");

var _regx2 = _interopRequireDefault(_regx);

var _regexp = require("./util/regexp");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var rx = (0, _regx2.default)("g");
/*
3.1.2. 全角文字どうし

原則として、全角文字どうしの間にスペースを入れません。ただしカタカナ複合語の場合を除きます。
「2.1.7 カタカナ複合語」を参照してください。
 */
function reporter(context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report,
        fixer = context.fixer,
        getSource = context.getSource;

    return _defineProperty({}, Syntax.Str, function (node) {
        if (!(0, _nodeUtil.isUserWrittenNode)(node, context)) {
            return;
        }
        var text = getSource(node);
        // 全角同士の間は半角スペースを入れない
        var matchReg = rx(_templateObject, _regexp.japaneseRegExp, _regexp.japaneseRegExp);
        var katakakana = /[ァ-ヶ]( )[ァ-ヶ]/;
        (0, _matchIndex.matchAll)(text, matchReg).forEach(function (match) {
            var input = match.input,
                captureGroups = match.captureGroups;
            // ただしカタカナ複合語の場合を除きます。

            if (katakakana.test(input)) {
                return;
            }
            captureGroups.forEach(function (captureGroup) {
                var index = captureGroup.index;
                report(node, new RuleError("原則として、全角文字どうしの間にスペースを入れません。", {
                    index: index,
                    fix: fixer.replaceTextRange([index, index + 1], "")
                }));
            });
        });
    });
}
module.exports = {
    linter: reporter,
    fixer: reporter
};
//# sourceMappingURL=3.1.2.js.map