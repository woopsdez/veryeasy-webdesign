{"version":3,"sources":["../src/2.1.10.js"],"names":["reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","numberWithComma","strictMatchReg","match","exec","matchedString","forEach","index","subMatch","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;AACA;;;;;;AAKA;;AACA;;;;AACA,SAASA,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QACjBC,MADiB,GAC+BD,OAD/B,CACjBC,MADiB;AAAA,QACTC,SADS,GAC+BF,OAD/B,CACTE,SADS;AAAA,QACEC,MADF,GAC+BH,OAD/B,CACEG,MADF;AAAA,QACUC,KADV,GAC+BJ,OAD/B,CACUI,KADV;AAAA,QACiBC,SADjB,GAC+BL,OAD/B,CACiBK,SADjB;;AAEvB,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACuB;AACf,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAIQ,OAAOH,UAAUE,IAAV,CAAX;AACA;AACA,YAAIE,kBAAkB,WAAtB;AACA;AACA,YAAIC,iBAAiB,YAArB;AACA,YAAIC,cAAJ;AACA,eAAQA,QAAQF,gBAAgBG,IAAhB,CAAqBJ,IAArB,CAAhB,EAA6C;AACzC;AACA;AACA,gBAAIK,gBAAgBF,MAAM,CAAN,CAApB;AACA,kDAAqBE,aAArB,EAAoCH,cAApC,EAAoDI,OAApD,CAA4D,oBAAY;AAAA,oBAC5DC,KAD4D,GAClDC,QADkD,CAC5DD,KAD4D;;AAEpEZ,uBACII,IADJ,EAEI,IAAIL,SAAJ,CAAc,mBAAd,EAAmC;AAC/Ba,2BAAOJ,MAAMI,KAAN,GAAcA,KADU;AAE/BE,yBAAKb,MAAMc,gBAAN,CAAuB,CAACP,MAAMI,KAAN,GAAcA,KAAf,EAAsBJ,MAAMI,KAAN,GAAcA,KAAd,GAAsB,CAA5C,CAAvB,EAAuE,GAAvE;AAF0B,iBAAnC,CAFJ;AAOH,aATD;AAUH;AACJ,KA1BL;AA4BH;AACDI,OAAOC,OAAP,GAAiB;AACbC,YAAQtB,QADK;AAEbK,WAAOL;AAFM,CAAjB","file":"2.1.10.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.10.算用数字の位取りの表記\n桁区切りには「カンマ」、小数点には「ピリオド」を使います。\nただし桁区切りの「カンマ」は省略する場合があります。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            // 数字,で絞って\n            let numberWithComma = /([\\d,]+)/g;\n            // 0,xxx な文字列を検出する\n            let strictMatchReg = /^0+(,)\\d+$/;\n            let match;\n            while ((match = numberWithComma.exec(text))) {\n                // この段階では 10,000 も含まれている\n                // ^0,xxx をだけを取り出す\n                let matchedString = match[0];\n                matchCaptureGroupAll(matchedString, strictMatchReg).forEach(subMatch => {\n                    const { index } = subMatch;\n                    report(\n                        node,\n                        new RuleError(\"小数点には「ピリオド」を使います。\", {\n                            index: match.index + index,\n                            fix: fixer.replaceTextRange([match.index + index, match.index + index + 1], \".\")\n                        })\n                    );\n                });\n            }\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}