{"version":3,"sources":["../src/textlint-rule-ja-no-successive-word.js"],"names":["tokenize","require","DefaultOptions","allowOnomatopee","isOnomatopee","str","test","module","exports","context","options","undefined","Syntax","RuleError","report","getSource","Str","node","text","then","prevToken","reportIfMatch","nextToken","prevWord","surface_form","currentWord","index","Math","max","word_position","tokens","forEach","token"],"mappings":"AAAA;AACA;;;;AACA,IAAMA,WAAWC,QAAQ,WAAR,EAAqBD,QAAtC;AACA,IAAME,iBAAiB;AACnB;AACA;AACA;AACA;AACAC,qBAAiB;AALE,CAAvB;;AAQA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,WAAO,gBAAeC,IAAf,CAAoBD,GAApB;AAAP;AACH;;AAEDE,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAgC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC7C,QAAMP,kBAAkBO,QAAQP,eAAR,KAA4BQ,SAA5B,GAAwCD,QAAQP,eAAhD,GACwCD,eAAeC,eAD/E;AAD6C,QAGrCS,MAHqC,GAGIH,OAHJ,CAGrCG,MAHqC;AAAA,QAG7BC,SAH6B,GAGIJ,OAHJ,CAG7BI,SAH6B;AAAA,QAGlBC,MAHkB,GAGIL,OAHJ,CAGlBK,MAHkB;AAAA,QAGVC,SAHU,GAGIN,OAHJ,CAGVM,SAHU;;AAI7C,+BACKH,OAAOI,GADZ,YACiBC,IADjB,EACuB;AACf,YAAMC,OAAOH,UAAUE,IAAV,CAAb;AACA,eAAOjB,SAASkB,IAAT,EAAeC,IAAf,CAAoB,kBAAU;AACjC,gBAAIC,YAAY,EAAhB;AACA,gBAAMC,gBAAgB,SAAhBA,aAAgB,CAACD,SAAD,EAAYE,SAAZ,EAA0B;AAC5C,oBAAMC,WAAWH,UAAUI,YAA3B;AACA,oBAAMC,cAAcH,UAAUE,YAA9B;AACA,oBAAID,aAAaE,WAAjB,EAA8B;AAC1B;AACH;AACD,oBAAItB,mBAAmBC,aAAamB,QAAb,CAAnB,IAA6CnB,aAAaqB,WAAb,CAAjD,EAA4E;AACxE;AACH;AACD,oBAAMC,QAAQC,KAAKC,GAAL,CAASN,UAAUO,aAAV,GAA0B,CAAnC,EAAsC,CAAtC,CAAd;AACAf,uBAAOG,IAAP,EAAa,IAAIJ,SAAJ,QAAkBY,WAAlB,+FAAkD;AAC3DC;AAD2D,iBAAlD,CAAb;AAGH,aAbD;AAcAI,mBAAOC,OAAP,CAAe,iBAAS;AACpBV,8BAAcD,SAAd,EAAyBY,KAAzB;AACAZ,4BAAYY,KAAZ;AACH,aAHD;AAIH,SApBM,CAAP;AAqBH,KAxBL;AA0BH,CA9BD","file":"textlint-rule-ja-no-successive-word.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst tokenize = require(\"kuromojin\").tokenize;\nconst DefaultOptions = {\n    // オノマトペを許可する\n    // 制限: オノマトペを判定する方法がないため、同じカタカナの語が連続したものをオノマトペとして扱う\n    // 例) カクカク、ドキドキ、ビリビリ\n    // https://ja.wikipedia.org/wiki/%E6%93%AC%E5%A3%B0%E8%AA%9E\n    allowOnomatopee: true\n};\n\nfunction isOnomatopee(str) {\n    return /^[ァ-ロワヲンー]*$/.test(str);\n}\n\nmodule.exports = function(context, options = {}) {\n    const allowOnomatopee = options.allowOnomatopee !== undefined ? options.allowOnomatopee\n                                                                  : DefaultOptions.allowOnomatopee;\n    const { Syntax, RuleError, report, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            const text = getSource(node);\n            return tokenize(text).then(tokens => {\n                let prevToken = {};\n                const reportIfMatch = (prevToken, nextToken) => {\n                    const prevWord = prevToken.surface_form;\n                    const currentWord = nextToken.surface_form;\n                    if (prevWord !== currentWord) {\n                        return;\n                    }\n                    if (allowOnomatopee && isOnomatopee(prevWord) && isOnomatopee(currentWord)) {\n                        return;\n                    }\n                    const index = Math.max(nextToken.word_position - 1, 0);\n                    report(node, new RuleError(`\"${currentWord}\" が連続して2回使われています。`, {\n                        index\n                    }));\n                };\n                tokens.forEach(token => {\n                    reportIfMatch(prevToken, token);\n                    prevToken = token;\n                });\n            });\n        }\n    }\n};\n"]}